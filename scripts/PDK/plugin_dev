#!/usr/bin/python

#
# Create new test directory from a provided TEMPLATE dir
#

import glob
import os
import shutil
import optparse
import sys

# Gather Args
args = sys.argv[1:]

def print_usage():
    print("""
Usage:
  plugin_dev (options) [test|archiver] [name]
  plugin_dev (options) [tool] [test-associated] [name]

plugin_dev --help for more information
""")

usage = """
  plugin_dev (options) [test|archiver] [name]
  plugin_dev (options) [tool] [test-associated] [name]

Example usage:
  plugin_dev test ftp
  plugin_dev tool ftp dns
  plugin_dev archiver ftp
  plugin-dev -d /home/user/pscheduler test ftp"""

parser = optparse.OptionParser(usage=usage)

# Add Options
parser.add_option("-d", "--dir", dest="directory",
            help="Directory to which folder will be copied",
            action="store", type="string")

(options, args) = parser.parse_args(args)


whereAmI = os.path.dirname(sys.argv[0])

try:
    if args[0] not in [ "test", "tool", "archiver" ]:
        print_usage()
        exit(1)
except IndexError:
    print_usage()
    exit(1)

try:
    type = args[0]
    if (type == "tool"):
        testName = args[2]
        testAssociated = args[1]
    else:
        testName = args[1]
except IndexError:
    print_usage()
    exit(1)


if options.directory is not None:
    destDir = options.directory
else:

    # By default, point at the top of the pScheduler tree, which we
    # assume to be in ../.. relative to this script.
    destDir = os.path.join(whereAmI, "..", "..")

    # ...but verify that by looking for at least one of the type of
    # plugin we're making in that location.
    if not glob.glob(os.path.join(destDir, "pscheduler-%s-*" % (type))):
        print((os.path.abspath(destDir), "does not look like the top of the pScheduler tree."))
        exit(1)




dirName = "pscheduler-" + type + "-TEMPLATE"
toCopy = os.path.join(whereAmI, "templates", type + ".TEMPLATE")
# Copy everything to main directory
newPlugin = dirName.replace("TEMPLATE", testName)
newDir = os.path.join(destDir, newPlugin)

try:
    shutil.copytree(toCopy, newDir)
except shutil.Error as e:
    print(("Error copying directory: %s" % e))
    exit(1)
except OSError as e:
    print(("Error copying directory: %s" % e))
    exit(1)

absDir = os.path.abspath(os.path.join(whereAmI, newDir))

# Rename directories
for (path, dirs, files) in os.walk(absDir):
    for dirName in dirs:
        localPath = os.path.join(path, dirName)
        newName = dirName.replace("TEMPLATE", testName)
        os.rename(os.path.join(absDir, dirName), os.path.join(absDir, newName))

for (path, dirs, files) in os.walk(absDir):
    for filename in files:
        localPath = os.path.join(path, filename)
        # Find and replace within files
        with open(localPath) as f:
            s = f.read()
        s = s.replace("TEMPLATE", testName)
        # Replace additional parameters if it's a tool
        if (type == "tool"):
            s = s.replace("TEST-REPLACE", testAssociated)
        with open(localPath, "w") as f:
            f.write(s)
        # Rename all files as necessary
        os.rename(localPath, localPath.replace("TEMPLATE", testName))

print(("""
    New %s plugin '%s' has been created
    at %s.

    Please read %s for further instructions.
    """ % (type,
           testName,
           absDir,
           os.path.join(whereAmI, "README.md")
    )))
