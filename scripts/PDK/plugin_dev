#!/usr/bin/env python3
#
# Create new test directory from a provided __PLUGIN_NAME__ dir
#

import glob
import os
import shutil
import optparse
import sys



# Parse the arguments

usage = """
  plugin_dev (options) [test|archiver] [name]
  plugin_dev (options) [tool] [test-associated] [name]
"""

epilog = """
Example usage:
  plugin_dev test ftp
  plugin_dev tool ftp dns
  plugin_dev archiver ftp
  plugin-dev --directory /home/user/pscheduler test ftp
"""

class VerbatimParser(optparse.OptionParser):
    def format_epilog(self, formatter):
        return self.epilog

parser = VerbatimParser(usage=usage, epilog=epilog)

# Add Options
parser.add_option("-d", "--dir", "--directory", dest="directory",
            help="Write plugin skeleton in DIRECTORY",
            action="store", type="string")

parser.add_option("--debug", dest="debug",
                  help="Debug to standard error",
                  action="store_true", default=False)

(options, args) = parser.parse_args(sys.argv[1:])



# Utilities

def die(*args):
    print(*args, file=sys.stderr)
    exit(1)

def debug(*args):
    if options.debug:
        print(*args, file=sys.stderr)



# Constants

PLUGIN_NAME_TAG = '__PLUGIN_NAME__'
TEST_NAME_TAG = '__TEST_NAME__'




where_am_i = os.path.dirname(sys.argv[0])

try:
    if args[0] not in [ "test", "tool", "archiver" ]:
        parser.print_usage()
        exit(1)
except IndexError:
    parser.print_usage()
    exit(1)

try:
    plugin_type = args[0]
    if (plugin_type == "tool"):
        plugin_name = args[2]
        test_name = args[1]
    else:
        plugin_name = args[1]
        test_name = ""
except IndexError:
    parser.print_usage()
    exit(1)


if options.directory is not None:
    dest_dir = options.directory
else:

    # By default, point at the top of the pScheduler tree, which we
    # assume to be in ../.. relative to this script.
    dest_dir = os.path.join(where_am_i, "..", "..")

    # ...but verify that by looking for at least one of the type of
    # plugin we're making in that location.
    if not glob.glob(os.path.join(dest_dir, "pscheduler-%s-*" % (plugin_type))):
        die((os.path.abspath(dest_dir), "does not look like the top of the pScheduler tree."))


#
# Copy the template into the new directory
#

new_plugin_dir = os.path.join(
    dest_dir,
    "pscheduler-{}-{}".format(plugin_type, PLUGIN_NAME_TAG).replace(PLUGIN_NAME_TAG, plugin_name)
)

debug("Creating plugin in {}".format(new_plugin_dir))
try:
    to_copy = os.path.join(where_am_i, "templates", plugin_type)
    debug("Copying {} to {}".format(to_copy, new_plugin_dir))
    shutil.copytree(to_copy, new_plugin_dir)
except (OSError, shutil.Error) as ex:
    die("Error copying directory:", ex)


#
# Customize everything in the newly-copied template to meet what the
# user specified.
#

for (path, dirs, files) in os.walk(new_plugin_dir, topdown=False, onerror=die):

    for candidate in files:

        location = os.path.join(path, candidate)

        # Replace key strings inside the file

        with open(location, "r") as in_file:
            old_text = in_file.read()
        new_text = old_text.replace(PLUGIN_NAME_TAG, plugin_name).replace(TEST_NAME_TAG, test_name)
        if new_text != old_text:
            debug("Replacing text in", location)
            with open(location, "w") as out_file:
                out_file.write(new_text)

        # Rename the file
        new_name = candidate.replace(PLUGIN_NAME_TAG, plugin_name)
        if new_name != candidate:
            new_full = os.path.join(path, new_name)
            debug("Renaming", location, "to", new_full)
            os.rename(location, new_full)

    for candidate in dirs:

        new_name = candidate.replace(PLUGIN_NAME_TAG, plugin_name)
        if new_name != candidate:
            debug("Renaming directory", candidate, "to", new_name)
            os.rename(os.path.join(path, candidate), os.path.join(path, new_name))




print("""
New {} plugin '{}' has been created
at {}.

Please read {} for further instructions.

""".format(
    plugin_type,
    plugin_name,
    new_plugin_dir,
    os.path.join(where_am_i, "README.md")
)
)
