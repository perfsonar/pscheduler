#!/usr/bin/env python3

#
# Development Order #4:
# 
# This file encodes CLI arguments as JSON data in a test spec,
# as defined by the datatypes in validate.py
# 
# This can be tested directly using the following syntax:
# ./cli-to-spec --option argument
#

import re
import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   cli_args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   cli_args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   cli_args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""
    This text will be printed out at the bottom of the
    "help" message. Change this to whatever you like,
    or don't include it at all. This could be a good place
    for example usage cases, etc.
""",
      formatter_class=argparse.RawTextHelpFormatter
)

# Add all potential command line options here.

# Check https://docs.python.org/3/library/argparse.html for more
# documentation on the argument parser.

# IMPORTANT NOTE: Any arguments using store_true or store_false must
# have a default_value of None.


arg_parser.add_argument("--host",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("--duration",
                      help="Duration of idle test.",
                      action="store", type=str,
                      dest="duration")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type=str,
                      dest="timeout")

arg_parser.add_argument("--implementation",
                      help="Preferred implementation to be used. (api|system)",
                      action="store", type=str,
                      dest="implementation")

args = arg_parser.parse_args(cli_args)


# Call .set(n) on this object to indicate that a parameter requires
# schema level n or higher.  The object will return the highes-set
# value when .value() is called.
#
# For example, if the 'foo' paramater was introduced in schema level 2:
#
#  if options.foo is not None:
#      result['foo'] = options.foo
#      schema.set(2)
#
# If this is a brand-new test, you won't need to call .set() since the
# default is 1.

schema = pscheduler.HighInteger(1)


# Build the test specification.  All we do here is build and set
# schema levels.  Validation happens elsewhere.

result = { }

if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host-node'] = args.host_node

if args.timeout is not None:
   result['timeout'] = args.timeout

if args.duration is not None:
   result['duration'] = args.duration

if args.implementation is not None:
   result['implementation'] = args.implementation

result['schema'] = schema.value()

pscheduler.succeed_json(result)
