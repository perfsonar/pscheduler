#!/usr/bin/env python3

"""
This program generates a regular expression for evaluating the
time/date portion of POSIX crontab files as defined at
https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html

The result is used in the pScheduler JSON Schema.
"""

import re

def full_set(value):
    value_range = "(%s-%s)" % (value, value)
    value_val = "(%s|%s)" % (value, value_range)
    return "(\*|(%s(,%s)*))" % (value_val, value_val)


minute = "([0-5]?\d)"
minutes = full_set(minute)

hour = "(([01]?\d)|2[0-3])"
hours = full_set(hour)

dom = "((0?[1-9])|([12]\d)|(3[01]))"
doms = full_set(dom)

month = "((0?[1-9])|(1[0-2]))"
months = full_set(month)

dow = "[0-6]"
dows = full_set(dow)


full = "^%s$" % (
    "\s+".join([minutes, hours, doms, months, dows])
)

#
# Some unit testing
#

rex = re.compile(full)

# Minute, Hour, DoM, Month, DoW

for test in [
        (False, "#"),
        (False, "XXX"),
        (False, "? * * 3,4,5 MON,TUE"),

        (True,  "* * * * *"),

        # Minute

        (True,  "0 * * * *"),
        (True,  "59 * * * *"),
        (False, "60 * * * *"),

        (True,  "1,2 * * * *"),
        (True,  "1,2,3,44 * * * *"),
        (True,  "1,59 * * * *"),
        (False, "1,60 * * * *"),

        (True,  "1-2 * * * *"),
        (True,  "1-59 * * * *"),
        (False, "1-60 * * * *"),

        (True,  "1,2,4-10 * * * *"),

        # Hour

        (True,  "* 0 * * *"),
        (True,  "* 23 * * *"),
        (False, "* 24 * * *"),

        (True,  "* 1,2 * * *"),
        (True,  "* 1,2,3,18 * * *"),
        (True,  "* 1,23 * * *"),
        (False, "* 1,24 * * *"),

        (True,  "* 1-2 * * *"),
        (True,  "* 1-12 * * *"),
        (False, "* 1-24 * * *"),

        (True,  "* 1,2,4-10 * * *"),

        # Day of Month

        (False, "* * 0 * *"),
        (True,  "* * 1 * *"),
        (True,  "* * 31 * *"),
        (False, "* * 32 * *"),

        (True,  "* * 1,2 * *"),
        (True,  "* * 1,2,3,18 * *"),
        (True,  "* * 1,31 * *"),
        (False, "* * 1,32 * *"),

        (True,  "* * 1-2 * *"),
        (True,  "* * 1-12 * *"),
        (False, "* * 1-32 * *"),

        (True,  "* * 1,2,4-10 * *"),


        # Month of Year

        (False, "* * * 0 *"),
        (True,  "* * * 12 *"),
        (False, "* * * 13 *"),

        (True,  "* * * 1,2 *"),
        (True,  "* * * 1,2,3,12 *"),
        (True,  "* * * 1,12 *"),
        (False, "* * * 1,13 *"),

        (True,  "* * * 1-2 *"),
        (True,  "* * * 1-12 *"),
        (False, "* * * 1-13 *"),

        (True,  "* * * 1,2,4-10 *"),


        # Day of Week

        (True, "* * * * 0"),
        (True,  "* * * * 6"),
        (False, "* * * * 7"),

        (True,  "* * * * 0,2"),
        (True,  "* * * * 0,2,3,6"),
        (True,  "* * * * 0,6"),
        (False, "* * * * 0,7"),

        (True,  "* * * * 0-2"),
        (True,  "* * * * 0-6"),
        (False, "* * * * 1-7"),

        (True,  "* * * * 1,2,4-6"),

        ]:
    expected, string = test
    matches = re.search(rex, string)

    got = matches is not None

    if got != expected:
        print("ERROR: %s did not evaluate as expected." % (string))
        exit(1)


print(full)
