#!/usr/bin/env python3
#
# Dump out what queries are holding locks and how many other jobs are
# being blocked by them.
#

import pscheduler

dsn = pscheduler.string_from_file("@/etc/pscheduler/database/database-dsn")
pg = pscheduler.PgConnection(dsn, name="test")


# See https://wiki.postgresql.org/wiki/Lock_Monitoring
QUERY = """
 SELECT blocked_locks.pid     AS blocked_pid,
         blocked_activity.usename  AS blocked_user,
         blocking_locks.pid     AS blocking_pid,
         blocking_activity.usename AS blocking_user,
         blocked_activity.query    AS blocked_statement,
         blocking_activity.query   AS current_statement_in_blocking_process
   FROM  pg_catalog.pg_locks         blocked_locks
    JOIN pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = blocked_locks.pid
    JOIN pg_catalog.pg_locks         blocking_locks
        ON blocking_locks.locktype = blocked_locks.locktype
        AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
        AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
        AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
        AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
        AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
        AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
        AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
        AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
        AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
        AND blocking_locks.pid != blocked_locks.pid
    JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
   WHERE NOT blocked_locks.GRANTED
;
"""


blockers = {}

query = pg.query(QUERY)

for row in query:

    (blocked_pid, blocked_user, blocking_pid, blocking_user, \
     blocked_statement, current_statement_in_blocking_process ) = row

    if blocking_pid in blockers:
        blockers[blocking_pid]["count"] += 1
    else:
        blockers[blocking_pid] = {
            "statement": current_statement_in_blocking_process,
            "pid": blocking_pid,
            "count": 1
        }

block_list = sorted(list(blockers.values()), key=lambda block: block["count"])

print("TOTAL", len(block_list))
print()

for block in block_list:
    print("PID", block["pid"], "blocking", block["count"])
    print(block["statement"])
    print()
    print()
