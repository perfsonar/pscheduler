#!/usr/bin/env python3
#
# Format a result
# Development Order #8:

import jsontemplate
import pscheduler
import sys

from validate import result_is_valid


try:
    format = sys.argv[1]
except IndexError:
    format = "text/plain"

input = pscheduler.json_load(exit_on_error=True, max_schema=1)

valid, message = result_is_valid(input["result"])

if not valid:
    pscheduler.fail(message)
json = input["result"]["result"]
#print(json)
if len(json) == 0:
    print("No networks found!")
if format == "text/plain":
    for network in json:
        ipv6pad = ""
        if len(network) > 15: 
            ipv6pad = " " * (len(network)-15)
        
        if len(json[network]) == 0:
            print("Network {} is up, but no open ports were detected.".format(network))
            continue
        if isinstance(list(json[network].values())[0], dict):
            print(network[:-15]+"{:15s}|{:>6s} |{:<9s}|{:<15s}|{:<21s}|{:<10s}|{:<10s}|{:<30s}".format(network[-15:], "PORT", "STATE", "NAME", "PRODUCT", "VERSION", "OS", "EXTRA INFORMATION"))
            print(ipv6pad.replace(" ", "-")+"{:-<15s}+{:->6s}-+{:-<9s}+{:-<15s}+{:-<21s}+{:-<10s}+{:-<10s}+{:-<30s}".format("", "", "", "", "", "", "", ""))
            for portKey in json[network]:
                port = json[network][portKey]
                print(ipv6pad+"{:15.15s}|{:>6.6s} |{:<9.9s}|{:<15.15s}|{:<21.21s}|{:<10.10s}|{:<10.10s}|{:<30s}".format( "",
                    str(portKey), 
                    str(port["state"]) if "state" in port else " ", 
                    str(port["name"]) if "name" in port else " ", 
                    str(port["product"]) if "product" in port else " ", 
                    str(port["version"])  if "version" in port else " ",
                    str(port["ostype"]) if "ostype" in port else " ", 
                    str(port["extrainfo"]) if "extrainfo" in port else " "))
        else:
            print(network[:-15]+"{:15}".format(network[-15:]))
            print("{:>5} | {:<8s}".format("PORT", "STATE"))
            print("-"*6 + "+" + "-"*6)
            for portKey in json[network]:
                print("{:>5s} | {:<8s}".format(str(portKey), str(json[network][portKey])))
        print("")

elif format == "text/html":
    for network in json:    
        if len(json[network]) == 0:
            print("No open ports on network: "+str(network))
            continue
        print("<h3>"+network+"</h3>")
        print('<table border = "2">')
        if type(json[network]) is dict:
            print("<thead>")
            print("  <tr>")
            print("    <th>Port</th>")
            print("    <th>State</th>")
            print("    <th>Name</th>")
            print("    <th>Product</th>")
            print("    <th>Version</th>")
            print("    <th>OS</th>")
            print("    <th>Extra Information</th>")
            print("  </tr>")
            print("</thead>")

            print("<tbody>")
            for port in json[network]:
                portKey = port
                port = json[network][port]
                print(" <tr>")
                print("    <td>"+str(portKey)+"</td>")
                print("    <td>"+str(port["state"]) if "state" in port else " "+"</td>")
                print("    <td>"+str(port["name"]) if "name" in port else " "+"</td>")
                print("    <td>"+str(port["product"]) if "product" in port else " "+"</td>")
                print("    <td>"+str(port["version"])  if "version" in port else " "+"</td>")
                print("    <td>"+str(port["ostype"]) if "ostype" in port else " "+"</td>")
                print("    <td>"+str(port["extrainfo"]) if "extrainfo" in port else " "+"</td>")
                print("  </tr>")
            print("</tbody>")
        else:
            print("  <tr>")
            print("    <th>Port</th>")
            for port in json[network]:
                print("    <td>"+str(port)+"</td>")
            print("  </tr>")

            print("  <tr>")
            print("    <th>State</th>")
            for port in json[network]:
                print("    <td>"+str(json[network][port])+"</td>")
            print("  </tr>")
        print("</table>")
        print("<br></br>")

else:

    pscheduler.fail("Unsupported format '%s'" % format)

pscheduler.succeed()
