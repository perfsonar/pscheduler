#!/usr/bin/env python3
#Development Order #4:
import optparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



opt_parser = pscheduler.FailingOptionParser(epilog=
"""Examples:
  task openports --source 127.0.0.1 --network 192.0.2.0 --lessinfo --timeout PT10S
      192.0.2.0
     PORT | STATE
    ------+------
        1 | open
       22 | closed
     8080 | filtered
    
  task openports --source 127.0.0.1 --network 45.33.32.156/28 --timeout PT5M
  
  45.33.32.145   |  PORT |STATE    |NAME           |PRODUCT              |VERSION   |OS        |EXTRA INFORMATION
  ---------------+-------+---------+---------------+---------------------+----------+----------+------------------------------
                 |   135 |open     |msrpc          |Microsoft Windows RPC|          |Windows   |
                 |  3306 |open     |mysql          |                     |          |          |
                 |  8009 |open     |ajp13          |Apache Jserv         |          |          |Protocol v1.3
  
  45.33.32.147   |  PORT |STATE    |NAME           |PRODUCT              |VERSION   |OS        |EXTRA INFORMATION
  ---------------+-------+---------+---------------+---------------------+----------+----------+------------------------------
                 |  1022 |filtered |exp2           |                     |          |          |
                 |  8291 |filtered |unknown        |                     |          |          |

  45.33.32.148   |  PORT |STATE    |NAME           |PRODUCT              |VERSION   |OS        |EXTRA INFORMATION
  ---------------+-------+---------+---------------+---------------------+----------+----------+------------------------------
                 |    22 |open     |ssh            |OpenSSH              |7.4p1 Debi|Linux     |protocol 2.0
                 |    80 |open     |http           |nginx                |1.10.3    |          |

  45.33.32.149   |  PORT |STATE    |NAME           |PRODUCT              |VERSION   |OS        |EXTRA INFORMATION
  ---------------+-------+---------+---------------+---------------------+----------+----------+------------------------------
                 |   443 |open     |http           |Apache httpd         |2.4.25    |          |(Debian)
                 |  2222 |open     |ssh            |OpenSSH              |7.4p1 Debi|Linux     |protocol 2.0

  task openports --source 127.0.0.1 --network 192.0.2.0 --ports 8080-8081 --lessinfo --timeout PT5S
      192.0.2.0
     PORT | STATE
    ------+------
     8081 | open
"""
)

opt_parser.add_option("--network",
                      help="Host(s) to scan (single host or CIDR notation for subnet)",
                      action="store", type="string",
                      dest="network")

opt_parser.add_option("--ports",
                      help="Specify which port(s) to scan (ex: -p 1-1024,8080,65535).",
                      action="store", type="string",
                      dest="ports")

opt_parser.add_option("--source",
                      help="Set source IP for nmap call",
                      action="store", type="string",
                      dest="source")

opt_parser.add_option("--timeout",
                      help="Maximum time to wait for responses.",
                      action="store", type="string",
                      dest="timeout")

opt_parser.add_option("--lessinfo",
                      help="Only display open ports on network, suppress service/version/OS details. Runs faster.",
                      action="store_false",
                      dest="service_detect")

(options, remaining_args) = opt_parser.parse_args(args)


""" if len(remaining_args) != 0:
   pscheduler.fail("Unusable arguments: %s" % " ".join(remaining_args)) """

result = { 'schema': 1 }

if options.network is not None:
   result['network'] = options.network

if options.ports is not None:
   result['ports'] = options.ports

if options.source is not None:
   result['source'] = options.source

if options.timeout is not None:
   result['timeout'] = options.timeout

result['service_detect'] = options.service_detect if options.service_detect is not None else True



pscheduler.succeed_json(result)
