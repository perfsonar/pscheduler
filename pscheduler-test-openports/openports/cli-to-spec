#!/usr/bin/env python3
import optparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



#usage: pscheduler task openports [optional: -p [portNumber]........]

opt_parser = pscheduler.FailingOptionParser(epilog=
"""Examples:
  task openports --source 127.0.0.1 --network 192.0.2.0
    IP Address | Open Ports 
    192.0.2.0  : [1, 2, 3, 4]
    
  task openports --source 127.0.0.1 --network 192.0.2.0/24
    IP Address | Open Ports 
    192.0.2.0  : [1, 2, 3, 4]
    192.0.2.1  : [1, 2, 3, 4]
    192.0.2.2  : [1, 2, 3, 4]
       ...     :     ...
    192.0.2.253: [1, 2, 3, 4]
    192.0.2.254: [1, 2, 3, 4]
    192.0.2.255: [1, 2, 3, 4]

  task openports --source 127.0.0.1 --network 192.0.2.0 --ports 8080-8081
    192.0.2.0: [8081]
"""
)

opt_parser.add_option("--network",
                      help="Host(s) to scan (single host or CIDR notation for subnet)",
                      action="store", type="string",
                      dest="network")

opt_parser.add_option("--ports",
                      help="Specify which port(s) to scan (ex: -p 1-1024,8080,65535).",
                      action="store", type="string",
                      dest="ports")

opt_parser.add_option("--source",
                      help="Set source IP for nmap call",
                      action="store", type="string",
                      dest="source")

opt_parser.add_option("--timeout",
                      help="Maximum time to wait for responses.",
                      action="store", type="string",
                      dest="timeout")

(options, remaining_args) = opt_parser.parse_args(args)


""" if len(remaining_args) != 0:
   pscheduler.fail("Unusable arguments: %s" % " ".join(remaining_args)) """

result = { 'schema': 1 }

if options.network is not None:
   result['network'] = options.network

if options.ports is not None:
   result['ports'] = options.ports

if options.source is not None:
   result['source'] = options.source

if options.timeout is not None:
   result['timeout'] = options.timeout


pscheduler.succeed_json(result)
