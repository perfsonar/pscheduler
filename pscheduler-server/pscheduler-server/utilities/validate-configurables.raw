#!/usr/bin/env python3
#
# Check to see if the configurables file is valid
#

import errno
import argparse
import pscheduler
import sys

pscheduler.set_graceful_exit()


CONFIGURABLES_FILE="__CONFIGURABLESFILE__"

MAX_SCHEMA = 1
SCHEMA = {
    "local": {
        "configurables_v1" : {
            "title": "pScheduler Configurables, Version 1",
            "type": "object",
            "properties": {
                "schema":          { "type": "integer", "enum": [ 1 ] },
                "keep-runs-tasks": { "$ref": "#/pScheduler/Duration" },
                "run-straggle":    { "$ref": "#/pScheduler/Duration" }
            },
            "additionalProperties": False
        },
        "configurables": {
            "anyOf" : [
                { "$ref": "#/local/configurables_v1" }
            ]
        }
    },

    "$ref": "#/local/configurables"
}


#
# Gargle the arguments
#

arg_parser = argparse.ArgumentParser(
    usage="%(prog)s [ input ]",
    epilog=
"""
Examples:

  validate-confgurables /foo/bar/configurables.conf
      Validate /foo/bar/configurables.conf

  validate-configurables -
      Validate configurables from the standard input

  validate-limits
      Validate __CONFIGURABLESFILE__ if readable.
""",
    formatter_class=argparse.RawTextHelpFormatter
    )

arg_parser.add_argument("--dump",
                      help="Dump the configurables if valid",
                      action="store_true",
                      dest="dump")

arg_parser.add_argument("--quiet",
                      help="Print nothing if successful",
                      action="store_true",
                      dest="quiet")

# Positional Arguments

arg_parser.add_argument("input",
                        help="Input file.  Defaults to __CONFIGURABLESFILE__, '-' for standard input",
                        nargs="?",
                        default="__CONFIGURABLESFILE__")

args = arg_parser.parse_args()


#
# Find the input
#

explicit_file = False
try:
    if args.input == "-":
        infile = sys.stdin
    else:
        infile = open(args.input, 'r')
except IOError as ex:
    if args.input == "__CONFIGURABLESFILE__" and ex.errno == errno.ENOENT:
        pscheduler.fail("No configurables file is installed.")
    else:
        pscheduler.fail("Unable to read input: %s" % (str(ex)))


#
# Load it
#

try:
    json = pscheduler.json_load(infile)
except Exception as ex:
    pscheduler.fail(str(ex))

if json is None:
    if args.dump:
        pscheduler.succeed("null")
    pscheduler.succeed(None if args.quiet else "No configurables file installed.")


#
# Validate it
#

try:
    valid, error = pscheduler.json_validate(json, SCHEMA)
except ValueError:
    pscheduler.fail("Configurables file must be a JSON object.")

if not valid:
    pscheduler.fail(error)

if args.dump:
    pscheduler.succeed(pscheduler.json_dump(json))

if sys.stdout.isatty() and not args.quiet:
    print("Configurables are valid.")

pscheduler.succeed()
