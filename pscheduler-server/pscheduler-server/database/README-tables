/*
	      Table Creation in the pScheduler Database


IMPORTANT NOTE: Please be aware that you're flying without a net here.
You must follow the instructions here carefully for things to go well.
Goofing it up on a production system may be hazardous to existing
data.  Please tread, but tread carefully.

Tables in this database are created and maintained using a 'DO'
statement that does three things:

1.  Determines the version of the table in the database if it exists.
This is accomplished using an internal table that gets updated when
your table is first created or updated to a later version.  For
example:

    t_version := table_version_find(t_name);
    t_version_old := t_version;

(You can see what the system thinks is the current state of the tables
with the query 'SELECT * FROM table_version;'.)


2.  Executes a series of IF statements called "upgrade blocks", one
for each successive version of the table.  Each IF statement does an
upgrade from some version v of the table to version v + 1.  Version
zero is a special number which means the table doesn't exist, and
creation of the table is treated as upgrading from version 0 to
version 1.  For example:

    IF t_version = 0    -- Creation of version 1
    THEN
        CREATE TABLE foo (a INTEGER);
        t_version = t_version + 1;
    END IF;

    IF t_version = 1    -- Upgrade 1 -> 2
    THEN
        ALTER TABLE FOO ADD COLUMN b INTEGER;
        t_version = t_version + 1;
    END IF;

    IF t_version = 2    -- Upgrade 2 -> 3
    THEN
        ALTER TABLE FOO ADD COLUMN c INTEGER;
        t_version = t_version + 1;
    END IF;

Note that each step increments the version number as it goes along.
If the table doesn't exist, all steps will be taken in order, and the
end result will be the table in its latest version (3 in this
example).  If the table is at, say, version 1, the upgrade from 0 to 1
will not happen but the upgrades from 1 to 2 and 2 to 3 will, again
resulting in a version 3 table.

Because of this behavior, the DO block can be run an infinite number
of times and the end result will always be the database in its latest
state.  As a result, the same script can be used for creation and
upgrades.

It is only necessary to create upgrade blocks for structural elements
such as tables and indexes.  Anything that can be safely dropped and
recreated without harming data in or indexing of existing tables
(triggers, views, or pretty much anything else that takes a 'CREATE OR
REPLACE' clause) should be done outside the DO block.  Additionally,
anything no longer needed in a new version should be DROPped in an
upgrade block since any code outside the DO block simply gets changed
and doesn't do any upgrading.

Before committing a change, be 100% sure that you have no version gaps
in the upgrade blocks, that they're all numbered properly and that
each increments the version number.  Also make sure the name of the
table you're operating on is correct.  Once a DO block has been put
into production code, it should not be changed, ever.  This especially
includes the upgrade block that creates the table.


3.  Updates the stored version of the table so later runs of the DO
statement know what, if any, upgrades to apply:

    PERFORM table_version_set(t_name, t_version, t_version_old);



PostgreSQL's data definition language (DDL) is transactional, which
means any alterations to the structure of the database can be rolled
back.  Because the entire database load process is done in a
transaction, any failure will put the database back into its prior
state.  This makes upgrades extremely safe.


The DO statement below is a complete example for a fictional table
called 'readme'.  It is strongly recommended that you use this as a
template for new tables to avoid any of the pitfalls of forgetting a
step.

This file is executable, so feel free to experiment with a copy.

*/



DO $$
DECLARE
    t_name TEXT;            -- Name of the table being worked on
    t_version INTEGER;      -- Current version of the table
    t_version_old INTEGER;  -- Version of the table at the start
BEGIN

    --
    -- Preparation
    --

    t_name := 'readme';

    t_version := table_version_find(t_name);
    t_version_old := t_version;


    --
    -- Upgrade Blocks
    --

    -- Version 0 (nonexistant) to version 1
    IF t_version = 0
    THEN

        CREATE TABLE readme (
	    -- Row identifier
            id     		   BIGSERIAL
	    			   PRIMARY KEY,

	    -- Name
            name     		   TEXT NOT NULL
	    			   UNIQUE
				   NOT NULL,

	    -- Size
            size    		   INTEGER
	    			   NOT NULL
                                   CHECK (size > 0)
        );

        CREATE INDEX readme_by_name ON readme(name);

	t_version := t_version + 1;

    END IF;

    -- Version 1 to version 2
    IF t_version = 1
    THEN
        -- In this version, we started keeping track of weight.
        ALTER TABLE readme ADD COLUMN weight INTEGER;
        t_version := t_version + 1;
    END IF;

    -- Version 2 to version 3
    IF t_version = 2
    THEN
        -- This version added comments.
        ALTER TABLE readme ADD COLUMN comments INTEGER;
        t_version := t_version + 1;
    END IF;

    -- Version 3 to version 4
    IF t_version = 3
    THEN
        -- Weight and querying by name are no longer a thing.  Get rid of them.
        ALTER TABLE readme DROP COLUMN weight CASCADE;
        DROP INDEX readme_by_name;
        t_version := t_version + 1;
    END IF;


    --
    -- Cleanup
    --

    PERFORM table_version_set(t_name, t_version, t_version_old);

END;
$$ LANGUAGE plpgsql;
