#!/usr/bin/env python3

#
# Development Order #4:
# 
# This file encodes CLI arguments as JSON data in a test spec,
# as defined by the datatypes in validate.py
# 
# This can be tested directly using the following syntax:
# ./cli-to-spec --option argument
#

import re
import argparse
import pscheduler
import sys

input_args = []

if len(sys.argv) > 1:

   # Args are on the command line
   input_args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   input_args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   input_args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""
"""
)
# no epilog string required?

arg_parser.add_argument("--host",
                      help="Host to run the test.",
                      action="store", type="string",
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="Host to run the test.",
                      action="store", type="string",
                      dest="host_node")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type="string",
                      dest="timeout")

arg_parser.add_argument("--interface",
		      help="Interface to be used.",
		      action="store", type="string",
		      dest="interface")

args = arg_parser.parse_intermixed_args()


# Call .set(n) on this object to indicate that a parameter requires
# schema level n or higher.  The object will return the highes-set
# value when .value() is called.
#
# For example, if the 'foo' paramater was introduced in schema level 2:
#
#  if options.foo is not None:
#      result['foo'] = options.foo
#      schema.set(2)
#
# If this is a brand-new test, you won't need to call .set() since the
# default is 1.

schema = pscheduler.HighInteger(1)

result = { }

if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host-node'] = args.host_node

if args.timeout is not None:
   result['timeout'] = args.timeout

if args.interface is not None:
   result['interface'] = args.interface


result['schema'] = schema.value()

pscheduler.succeed_json(result)
