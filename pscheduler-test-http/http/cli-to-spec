#!/usr/bin/python

#
# Convert command-line options to a test specification for http test
#

import re
import string
import optparse
import pscheduler
import sys

if len(sys.argv) > 1:

    # Args are on the command line
    args = sys.argv[1:]

else:

    # Args are in a JSON array on stdin
    json_args = pscheduler.json_load(exit_on_error=True)
    args = []

    if type(json_args) != list:
        pscheduler.fail("Invalid JSON for this operation")
    for arg in json_args:
        if type(arg) not in (unicode, str, int, float):
            pscheduler.fail("Invalid JSON for this operation")
    args = [str(arg) for arg in json_args]


# Gargle the arguments

opt_parser = pscheduler.FailingOptionParser(epilog=
    """
      Example:
      task http --url http://umich.edu --timeout PT10S
      task http --url http://google.com --parse search
      """
)


opt_parser.add_option("--url",
                      help="URL to query",
                      action="store", type="string",
                      dest="url")

opt_parser.add_option("--parse",
                      help="String to parse for",
                      action="store", type="string",
                      dest="parse")

opt_parser.add_option("--host",
                      help="Host to run the test",
                      action="store", type="string",
                      dest="host")

opt_parser.add_option("--host-node",
                      help="Host to run the test",
                      action="store", type="string",
                      dest="host_node")

opt_parser.add_option("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type="string",
                      dest="timeout")

(options, remaining_args) = opt_parser.parse_args(args)

if len(remaining_args) != 0:
    pscheduler.fail("Unusable arguments: %s" % " ".join(remaining_args))

result = {'schema': 1}

if not options.url:
    pscheduler.fail("URL must be given")
else: 
    result['url'] = options.url
if options.parse is not None:
    result['parse'] = options.parse
if options.timeout is not None:
    result['timeout'] = options.timeout

pscheduler.succeed_json(result)
