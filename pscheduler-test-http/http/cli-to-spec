#!/usr/bin/env python3

#
# Convert command-line options to a test specification for http test
#

import re
import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

    # Args are on the command line
    args = sys.argv[1:]

else:

    # Args are in a JSON array on stdin
    json_args = pscheduler.json_load(exit_on_error=True)
    args = []

    if not isinstance(json_args,list):
        pscheduler.fail("Invalid JSON for this operation")
    for arg in json_args:
        if not ( isinstance(arg, str)
                 or isinstance(arg, int)
                 or isinstance(arg, float) ):
            pscheduler.fail("Invalid JSON for this operation")
    args = [ str(arg) for arg in json_args ]


# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
    """
      Example:
      task http --url http://umich.edu --timeout PT10S
      task http --url http://google.com --parse search
      """,
    formatter_class=argparse.RawTextHelpFormatter)


arg_parser.add_argument("--url",
                      help="URL to query",
                      action="store", type=str,
                      dest="url")
arg_parser.add_argument("--header",
                      help="HTTP header for request, format 'HeaderName: Value'.  May be repeated.",
                      action="append", type="string",
                      dest="headers")

arg_parser.add_argument("--parse",
                      help="String to parse for",
                      action="store", type=str,
                      dest="parse")

arg_parser.add_argument("--host",
                      help="Host to run the test",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="Host to run the test",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("--ip-version",
                      help="Specificy which IP version to use, 4 or 6",
                      action="store", type=int,
                      dest="ip_version")

arg_parser.add_argument("--always-succeed",
                      help="Treat HTTP failures as successes, regardless of response code",
                      action="store_true",
                      dest="always_succeed")

arg_parser.add_argument("--keep-content",
                      help="Amount of content to keep in bytes; default none, 0 for all, SI units supported",
                      type=str,
                      action="store",
                      dest="keep_content")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type=str,
                      dest="timeout")


args = arg_parser.parse_args(args)


schema = pscheduler.HighInteger(1)
result = { }

if args.host is not None:
    result['host'] = args.host
if args.host_node is not None:
    result['host-node'] = args.host_node
if args.ip_version is not None:
    result["ip-version"] = args.ip_version
    schema.set(3)

if args.url is not None:
    result['url'] = args.url

if args.headers is not None:
    result['headers'] = {
        key.strip(): value.strip()
        for (key, value) in [item.split(':') for item in options.headers]
    }
    schema.set(4)

if args.parse is not None:
    result['parse'] = args.parse
if args.timeout is not None:
    result['timeout'] = args.timeout
if args.always_succeed is not None:
    schema.set(2)
    result['always-succeed'] = args.always_succeed

if args.keep_content is not None:
    try:
        result['keep-content'] = pscheduler.si_as_number(args.keep_content)
    except ValueError as ex:
        pscheduler.fail("Invalid value \"%s\" for keep-content: %s" % (args.bandwidth, ex))
    schema.set(2)

result['schema'] = schema.value()

pscheduler.succeed_json(result)
