#!/usr/bin/env python3

#
# Development Order #4:
# 
# This file encodes CLI arguments as JSON data in a test spec,
# as defined by the datatypes in validate.py
# 
# This can be tested directly using the following syntax:
# ./cli-to-spec --option argument
#

import re
import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

# TODO: Write an epilog.
arg_parser = argparse.ArgumentParser(epilog=
"""
    This software is a plugin for the pScheduler project that adds a
    disk-to-disk feature to the testing suite. This test supports three
    tools: globus, curl and ftp.

    GridFTP test:
        pscheduler task --tool globus disk-to-disk \
        --source ftp://sunn-dtn.es.net:2811/data1/10M.dat \
        --dest file:///tmp/test.out --timeout PT10S

    Standard FTP test:
        pscheduler task --tool ftp disk-to-disk \
        --source ftp://speedtest.tele2.net/1KB.zip \
        --dest /tmp/test.out --timeout PT5S
""",
    formatter_class=argparse.RawTextHelpFormatter)

# Add all potential command line options here
# Check https://docs.python.org/2/library/optparse.html for more
# documentation on the opt parser


arg_parser.add_argument("--duration",
                      help="Duration of idle test.",
                      action="store", type=str,
                      dest="duration")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt (in seconds)",
                      action="store", type=str,
                      dest="timeout")

arg_parser.add_argument("--host",
                      help="Host where the test should be run",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--source",
                      help="Source URL",
                      action="store", type=str,
                      dest="source")


arg_parser.add_argument("--dest",
                      help="Destination URL",
                      action="store", type=str,
                      dest="dest")

arg_parser.add_argument("--cleanup",
                      help="Delete test file after transfer",
                      default=None,
                      action="store_true",
                      dest="cleanup")
arg_parser.add_argument("--no-cleanup",
                      help="Keep test file after transfer",
                      default=None,
                      action="store_true",
                      dest="cleanup")

arg_parser.add_argument("--parallel", 
                      help="Number of parallel streams to use with GridFTP transfers",
                      action="store", type=int,
                      dest="parallel")

args = arg_parser.parse_args(args)

result = { 'schema': 1 }

if args.source is not None:
  result['source'] = args.source

if args.dest is not None:
  result['dest'] = args.dest

if args.host is not None:
  result['host'] = args.host

if args.parallel is not None:
   result["parallel"] = args.parallel

if args.cleanup is not None:
  result['cleanup'] = args.cleanup

if args.timeout is not None:
   result['timeout'] = args.timeout

if args.duration is not None:
   result['duration'] = args.duration


pscheduler.succeed_json(result)
