#!/usr/bin/env python3
#
# Convert command-line options to a test specification
#

import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""Examples:

  task netreach --network 192.0.2.0/24 --gateway 192.0.2.1
    Test 192.0.2.0/24 reached via 192.0.2.1.

  task netreach --network 192.0.2.0/24 --gateway 1
    Test 192.0.2.0/24 reached via the first host in the block.

  task netreach --network 192.0.2.0/24 --gateway -1
    Test 192.0.2.0/24 reached via the last host in the block.

""",
    formatter_class=argparse.RawTextHelpFormatter)


arg_parser.add_argument("--network",
                      help="Network to check",
                      action="store", type=str,
                      dest="network")

arg_parser.add_argument("--gateway",
                      help="Network's gateway address",
                      action="store", type=str,
                      dest="gateway")

arg_parser.add_argument("--host",
                      help="Host where the test should be run",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="pScheduler to contact for setup",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("--limit",
                      help="Maximum number of addresses to scan",
                      action="store", type=int,
                      dest="limit")

arg_parser.add_argument("--parallel",
                      help="Number of parallel tests (default 1)",
                      action="store", type=int,
                      dest="parallel")

arg_parser.add_argument("--scan",
                      help="Scan type (up, down, edges, random)",
                      action="store", type=str,
                      dest="scan")

arg_parser.add_argument("--timeout",
                      help="Maximum time to wait for responses.",
                      action="store", type=str,
                      dest="timeout")


args = arg_parser.parse_args(args)

result = { 'schema': 1 }


if args.network is not None:
   result['network'] = args.network

if args.gateway is not None:
   # This can be an integer or a string.
   try:
      result['gateway'] = int(args.gateway)
   except ValueError:
      result['gateway'] = args.gateway

if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host-node'] = args.host_node

if args.limit is not None:
   result['limit'] = args.limit

if args.parallel is not None:
   result['parallel'] = args.parallel

if args.scan is not None:
   result['scan'] = args.scan

if args.timeout is not None:
   result['timeout'] = args.timeout


pscheduler.succeed_json(result)
