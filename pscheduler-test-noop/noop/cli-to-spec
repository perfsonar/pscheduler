#!/usr/bin/env python3
#
# Convert comamnd-line options to a test specification

import argparse
import pscheduler
import sys

input_args = []

if len(sys.argv) > 1:

    # Args are on the command line
    input_args = sys.argv[1:]

else:

    # Args are in a JSON array on stdin
    json_args = pscheduler.json_load(exit_on_error=True)
    input_args = []

    if not isinstance(json_args, list):
        pscheduler.fail('Invalid JSON for this operation')
    for arg in json_args:
        if not (isinstance(arg, str)
                or isinstance(arg, int)
                or isinstance(arg, float)):
            pscheduler.fail('Invalid JSON for this operation')

    input_args = [str(arg) for arg in json_args]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
'''Examples:

  task noop --data '{ "foo": 123, "bar": false }'
      Pass data through.

  task noop --fail 0.5 --data '{ "foo": 123, "bar": false }'
      Pass data through, but fail half the time.
''',
formatter_class=argparse.RawTextHelpFormatter
                                            )


arg_parser.add_argument('--data',
                      help='JSON data (defaults to null)',
                      action='store', type='string',
                      dest='data')

arg_parser.add_argument('--host',
                      help='Host for test',
                      action='store', type='string',
                      dest='host')

arg_parser.add_argument('--host-node',
                      help='Host node for test',
                      action='store', type='string',
                      dest='host_node')

arg_parser.add_argument("-f", "--fail",
                      help="Probability of forced failure",
                      action="store", type="float",
                      dest="fail")



args = arg_parser.parse_args(input_args)


schema = pscheduler.HighInteger(1)
result = { }

if args.data is not None:
    try:
        result['data'] = pscheduler.json_load(args.data)
    except ValueError:
        pscheduler.fail('Invalid data (must be JSON)')

if args.host is not None:
    result['host'] = args.host

if args.host_node is not None:
    result['host-node'] = args.host_node

if args.fail is not None:
   result['fail'] = args.fail

result['schema'] = schema.value()

pscheduler.succeed_json(result)
