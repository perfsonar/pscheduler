#!/usr/bin/env python3

#
# Convert command-line options to a test specification
#

import re
import argparse
import pscheduler
import sys

input_args = []

if len(sys.argv) > 1:

   # Args are on the command line
   input_args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   input_args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   input_args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""
  Can be used with multiple oids by calling --oidargs multiple times.

  Example:
  task snmpset --version 2c --community public --dest example.net
  --oidargs sysLocation.0:s:'Ann Arbor' --oidargs sysContact.0:s:'John'

""",
    formatter_class=argparse.RawTextHelpFormatter)

arg_parser.add_argument("--host",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("--dest",
                      help="Destination that will be queried.",
                      action="store", type=str,
                      dest="dest")
                    
arg_parser.add_argument("--version",
                      help="Version of SNMP to be used. (1|2c|3)",
                      action="store", type=str,
                      dest="version")

arg_parser.add_argument("--oidargs",
                      help="OID, type, and value",
                      action="append", type=str, default=[],
                      dest="oidargs")

arg_parser.add_argument("--protocol",
                      help="Transport specifier (tcp|udp)",
                      action="store", type=str,
                      dest="protocol")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type=str,
                      dest="timeout")

# snmp v3 specific options

arg_parser.add_argument("--security-name",
                      help="Security Name",
                      action="store", type=str,
                      dest="security_name") 
arg_parser.add_argument("--auth-protocol",
                      help="Authentication Protocol (md5|sha)",
                      action="store", type=str,
                      dest="auth_protocol")

arg_parser.add_argument("--priv-protocol",
                      help="Privacy Protocol (des|aes)",
                      action="store", type=str,
                      dest="priv_protocol")

arg_parser.add_argument("--auth-key",
                      help="Authentication Passphrase",
                      action="store", type=str,
                      dest="auth_key")

arg_parser.add_argument("--priv-key",
                      help="Privacy Passphrase",
                      action="store", type=str,
                      dest="priv_key")

arg_parser.add_argument("--security-level",
                      help="Security Level (noAuthNoPriv|authNoPriv|authPriv)",
                      action="store", type=str,
                      dest="security_level")

arg_parser.add_argument("--context",
                      help="Context Name",
                      action="store", type=str,
                      dest="context")

#Not v3

arg_parser.add_argument("--community",
                          help="Community string",
                          action="store", type=str,
                          dest="community")

args = arg_parser.parse_args(input_args)


# Complain if there are arguments that don't match the SNMP version.

# TODO: This should really be done in the validator and not here.

arg_validity = {

   # SNMPv1 only
   "community": 1,

   # SNMPv2c and SNMPv3
   "security-name": 3,
   "auth-protocol": 3,
   "priv-protocol": 3,
   "auth-key": 3,
   "priv-key": 3,
   "security-level": 3,
   "context": 3
}


version = args.version or "1"

if args.version in ["2c", "3"]:
   check_version = 3
elif args.version in [None, "1"]:
   check_version = 1
else:
   pscheduler.fail("Invalid SNMP version (must be 1, 2c or 3)")

option_values = vars(args)
for option in option_values:
   if (option_values[option] is not None) \
      and (option in arg_validity) \
      and (arg_validity[option] != check_version):
      pscheduler.fail("--%s not allowed in SNMPv%s" % (option, version))



result = { 'schema': 1 }

#oidargs manipulation
dictargs=[]
for item in args.oidargs:
    s = item.split(':') 
    d = { "oid": s[0], "type": s[1], "value": s[2] }
    dictargs.append(d) 
if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host-node'] = args.host_node

if args.dest is not None:
   result['dest'] = args.dest

if args.version is not None:
   result['version'] = args.version

if args.oidargs is not None and len(args.oidargs):
   result['oidargs'] = dictargs

if args.protocol is not None:
   result['protocol'] = args.protocol

if args.timeout is not None:
   result['timeout'] = args.timeout


# TODO: This shouldn't be passing judgment on what combinations of
# options are valid.  If it's there, just convert it to JSON.

if version == 1:

  if args.community is not None:
    result['_community'] = args.community

else:

    if args.security_name is not None:
      result['security-name'] = args.security_name

    if args.auth_protocol is not None:
      result['auth-protocol'] = args.auth_protocol

    if args.priv_protocol is not None:
      result['priv-protocol'] = args.priv_protocol

    if args.auth_key is not None:
      result['auth-key'] = args.auth_key

    if args.priv_key is not None:
      result['priv-key'] = args.priv_key

    if args.security_level is not None:
      result['security-level'] = args.security_level

    if args.context is not None:
      result['context'] = args.context

pscheduler.succeed_json(result)
