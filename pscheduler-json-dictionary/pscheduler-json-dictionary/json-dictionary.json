{
    "#": "pScheduler JSON Dictionary",

    "pScheduler": {

        "#": "JSON Types",

        "AnyJSON": { },

        "Array": { "type": "array" },

        "AS": {
            "type": "object",
            "properties": {
                "number": { "$ref": "#/pScheduler/Cardinal" },
                "owner": { "type": "string" }
            },
            "additionalProperties": false,
            "required": [ "number" ]
        },

        "Boolean": { "type": "boolean" },

        "Cardinal": {
            "type": "integer",
            "minimum": 1
        },

        "CardinalList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/Cardinal" }
        },

        "CardinalZero": {
            "type": "integer",
            "minimum": 0
        },

        "CardinalZeroList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/CardinalZero" }
        },

        "ClockState": {
            "type": "object",
            "properties": {
                "time":         { "$ref": "#/pScheduler/Timestamp" },
                "synchronized": { "$ref": "#/pScheduler/Boolean" },
                "source":       { "$ref": "#/pScheduler/String" },
                "reference":    { "$ref": "#/pScheduler/String" },
                "offset":       { "$ref": "#/pScheduler/Number" }
            },
            "additionalProperties": false,
            "required": [ "time", "synchronized" ]
        },

        "Duration": {
            "type": "string",
            "#": "ISO 8601.  Source: https://gist.github.com/philipashlock/8830168",
            "#": "Modified not to accept repeats (e.g., R5PT1M), which we don't support.",
            "#": "Modified not to accept months or years, which are inexact.",
            "pattern": "^P(?:\\d+(?:\\.\\d+)?W)?(?:\\d+(?:\\.\\d+)?D)?(?:T(?:\\d+(?:\\.\\d+)?H)?(?:\\d+(?:\\.\\d+)?M)?(?:\\d+(?:\\.\\d+)?S)?)?$",
            "x-invalid-message": "'%s' is not a valid ISO 8601 duration."
        },

        "Email": { "type": "string", "format": "email" },

        "Float": {
            "type": "number"
        },

        "GeographicPosition": {
            "type": "string",
            "#": "ISO 6709",
            "#": "Source:  https://svn.apache.org/repos/asf/abdera/abdera2/common/src/main/java/org/apache/abdera2/common/geo/IsoPosition.java",
            "pattern": "^(([+-]\\d{2})(\\d{2})?(\\d{2})?(\\.\\d+)?)(([+-]\\d{3})(\\d{2})?(\\d{2})?(\\.\\d+)?)([+-]\\d+(\\.\\d+)?)?$"
        },

        "Host": {
            "#": "#1526: Need a single regex",
            "anyOf": [
                { "$ref": "#/pScheduler/HostName" },
                { "$ref": "#/pScheduler/IPAddress" }
            ]
        },

        "HostName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "#": "This is derived from the pattern in the JSONSchema module",
            "#": "but allows the first element to begin with an underscore.",
            "#": "See #1514.",
            "pattern": "^[A-Za-z0-9_][A-Za-z0-9\\-]{0,62}(\\.[A-Za-z0-9][A-Za-z0-9\\-]{1,62})*\\.?$"
        },

        "HostNamePort": {
            "#": "Note that this will cover valid IPv4 addresses, too.",
            "type": "string",
            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(:[0-9]+)?$"
        },

        "Integer": { "type": "integer" },

        "IPAddress": {
            "#": "#1526: Need a single regex",
            "oneOf": [
                { "type": "string", "format": "ipv4" },
                { "type": "string", "format": "ipv6" }
            ]
        },

        "IPv4": { "type": "string", "format": "ipv4" },

        "IPv6": { "type": "string", "format": "ipv6" },

        "IPv6RFC2732": {
            "#": "IPv6 address with optional port, formatted per RFC 2732",
            "#": "Source: https://stackoverflow.com/a/17871737/180674",
            "type": "string",
            "pattern": "^\\[(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\](:[0-9]+)?$"
        },

        "IPv4CIDR": {
            "type": "string",
            "#": "Source: http://blog.markhatton.co.uk/2011/03/15/regular-expressions-for-ip-addresses-cidr-ranges-and-hostnames",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
        },

        "IPv6CIDR": {
            "type": "string",
            "#": "Source: http://www.regexpal.com/93988",
            "pattern": "^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))$"
        },

        "IPCIDR": {
            "#1526 WAS: oneOf": [
                { "$ref": "#/pScheduler/IPv4CIDR" },
                { "$ref": "#/pScheduler/IPv6CIDR" }
            ],
            "type": "string",
            "pattern": "(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)|(^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))$)"
        },

        "IPCIDRList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/IPCIDR" }
        },

        "Int8": {
            "type": "integer",
            "minimum": -128,
            "maximum": 127
        },

        "UInt8": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },

        "Int16": {
            "type": "integer",
            "minimum": -32768,
            "maximum": 32767
        },

        "UInt16": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
        },

        "Int32": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
        },

        "UInt32": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295
        },

        "Int64": {
            "type": "integer",
            "minimum": -9223372036854775808,
            "maximum": 9223372036854775807
        },

        "UInt64": {
            "type": "integer",
            "minimum": 0,
            "maximum": 184446744073709551615
        },

        "IPPort": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
        },

        "IPPortRange": {
            "type": "object",
            "properties": {
                "lower": { "$ref": "#/pScheduler/IPPort" },
                "upper": { "$ref": "#/pScheduler/IPPort" }
            },
            "additionalProperties": false,
            "required": [ "lower", "upper" ]
        },

        "IPTOS": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },

        "JQTransformSpecification": {
            "type": "object",
            "properties": {
                "script": {
                    "anyOf": [
                        { "$ref": "#/pScheduler/String" },
                        { "$ref": "#/pScheduler/StringList" }
                    ]
                },
                "output-raw": { "$ref": "#/pScheduler/Boolean" },
                "args": { "$ref": "#/pScheduler/AnyJSON" }
            },
            "additionalProperties": false,
            "required": [ "script" ]
        },

        "Number": { "type": "number" },

        "POSIXCronSpecification": {
            "type": "string",
            "#": "POSIX-standard spec.  This was generated by",
            "#": "scripts/posix-cron-regex; see that for commentary.",
            "pattern": "^(\\*|((([0-5]?\\d)|(([0-5]?\\d)-([0-5]?\\d)))(,(([0-5]?\\d)|(([0-5]?\\d)-([0-5]?\\d))))*))\\s+(\\*|(((([01]?\\d)|2[0-3])|((([01]?\\d)|2[0-3])-(([01]?\\d)|2[0-3])))(,((([01]?\\d)|2[0-3])|((([01]?\\d)|2[0-3])-(([01]?\\d)|2[0-3]))))*))\\s+(\\*|((((0?[1-9])|([12]\\d)|(3[01]))|(((0?[1-9])|([12]\\d)|(3[01]))-((0?[1-9])|([12]\\d)|(3[01]))))(,(((0?[1-9])|([12]\\d)|(3[01]))|(((0?[1-9])|([12]\\d)|(3[01]))-((0?[1-9])|([12]\\d)|(3[01])))))*))\\s+(\\*|((((0?[1-9])|(1[0-2]))|(((0?[1-9])|(1[0-2]))-((0?[1-9])|(1[0-2]))))(,(((0?[1-9])|(1[0-2]))|(((0?[1-9])|(1[0-2]))-((0?[1-9])|(1[0-2])))))*))\\s+(\\*|(([0-6]|([0-6]-[0-6]))(,([0-6]|([0-6]-[0-6])))*))$",
            "x-invalid-message": "'%s' is not a valid cron specification."
        },

        "Probability": {
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0
        },

        "RetryPolicy": {
            "type": "array",
            "items": {"$ref": "#/pScheduler/RetryPolicyEntry" }
        },

        "RetryPolicyEntry": {
            "type": "object",
            "properties": {
                "attempts": {"$ref": "#/pScheduler/Cardinal" },
                "wait": {"$ref": "#/pScheduler/Duration" }
            },
            "additionalProperties": false,
            "required": [ "attempts", "wait" ]
        },

        "String": { "type": "string" },

        "StringList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/String" }
        },

        "StringMatch": {
            "type": "object",
            "properties": {
                "style": {
                    "type": "string",
                    "enum": [
                        "exact",
                        "contains",
                        "regex"
                    ]
                },
                "match": { "$ref": "#/pScheduler/String" },
                "case-insensitive": { "$ref": "#/pScheduler/Boolean" },
                "invert": { "$ref": "#/pScheduler/Boolean" }
            },
            "additionalProperties": false,
            "required": [ "style", "match" ]
        },

        "StringNull": {
            "anyOf": [
                { "$ref": "#/pScheduler/String" },
                { "type": "null" }
            ]
        },

        "Timestamp": {
            "type": "string",
            "#": "ISO 8601.  Source: https://gist.github.com/philipashlock/8830168",
            "pattern": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$"
        },

        "TimestampAbsoluteRelative": {
            "#1526 WAS: oneOf" : [
                { "$ref": "#/pScheduler/Timestamp" },
                { "$ref": "#/pScheduler/Duration" },
                {
                    "type": "string",
                    "#": "Same pattern as iso8601-duration, with '@' prepended",		    
                    "pattern": "^@(R\\d*/)?P(?:\\d+(?:\\.\\d+)?Y)?(?:\\d+(?:\\.\\d+)?M)?(?:\\d+(?:\\.\\d+)?W)?(?:\\d+(?:\\.\\d+)?D)?(?:T(?:\\d+(?:\\.\\d+)?H)?(?:\\d+(?:\\.\\d+)?M)?(?:\\d+(?:\\.\\d+)?S)?)?$"
                }
            ],

            "type": "string",
            "pattern": "(^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\4([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\18[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$)|(^[\\+-@]?P(?:\\d+(?:\\.\\d+)?W)?(?:\\d+(?:\\.\\d+)?D)?(?:T(?:\\d+(?:\\.\\d+)?H)?(?:\\d+(?:\\.\\d+)?M)?(?:\\d+(?:\\.\\d+)?S)?)?$)"
        },

        "URL": { "type": "string", "format": "uri" },

        "URLHostPort": {
            "#": "Any valid host/port pair as found in a URI per RFC 2396",
            "#1526 WAS: anyOf": [
                { "$ref": "#/pScheduler/HostNamePort" },
                { "$ref": "#/pScheduler/IPv6RFC2732" }
            ],
            "type": "string",
            "pattern": "(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(:[0-9]+)?$)|(^\\[(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\](:[0-9]+)?$)"
        },

        "UUID": {
            "type": "string",
            "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$"
        },

        "Version": {
            "type": "string",
            "pattern": "^[0-9]+(\\.[0-9]+)*[A-Za-z0-9-+]*$"
        },

        "#": "Compound Types",

        "ArchiveSpecification_V1": {
            "type": "object",
            "properties": {
                "schema": {
                    "type": "integer",
                    "enum": [ 1 ]
                },
                "archiver": { "type": "string" },
                "data": { "$ref": "#/pScheduler/AnyJSON" },
                "transform": { "$ref": "#/pScheduler/JQTransformSpecification" },
                "ttl": { "$ref": "#/pScheduler/Duration" }
            },
            "additionalProperties": false,
            "required": [
                "archiver",
                "data"
            ]
        },

        "ArchiveSpecification_V2": {
            "type": "object",
            "properties": {
                "schema": {
                    "type": "integer",
                    "enum": [ 2 ]
                },
                "runs": {
                    "type": "string",
                    "enum": [
                        "all",
                        "succeeded",
                        "failed"
                    ]
                },
                "archiver": { "type": "string" },
                "data": { "$ref": "#/pScheduler/AnyJSON" },
                "transform": { "$ref": "#/pScheduler/JQTransformSpecification" },
                "ttl": { "$ref": "#/pScheduler/Duration" },
                "uri-host": { "$ref": "#/pScheduler/URLHostPort" }
            },
            "additionalProperties": false,
            "required": [
                "schema",
                "archiver",
                "data"
            ]
        },

        "ArchiveSpecification_V3": {
            "type": "object",
            "properties": {
                "schema": {
                    "type": "integer",
                    "enum": [ 3 ]
                },
                "runs": {
                    "type": "string",
                    "enum": [
                        "all",
                        "succeeded",
                        "failed"
                    ]
                },
                "label": { "type": "string" },
                "archiver": { "type": "string" },
                "data": { "$ref": "#/pScheduler/AnyJSON" },
                "transform": { "$ref": "#/pScheduler/JQTransformSpecification" },
                "ttl": { "$ref": "#/pScheduler/Duration" },
                "uri-host": { "$ref": "#/pScheduler/URLHostPort" }
            },
            "additionalProperties": false,
            "required": [
                "schema",
                "archiver",
                "data"
            ]
        },

        "ArchiveSpecification": {
            "oneOf": [
                { "$ref": "#/pScheduler/ArchiveSpecification_V1" },
                { "$ref": "#/pScheduler/ArchiveSpecification_V2" },
                { "$ref": "#/pScheduler/ArchiveSpecification_V3" }
            ]
        },

        "ContextSpecificationSingle": {
            "type": "object",
            "properties": {
                "context": { "type": "string" },
                "data": { "$ref": "#/pScheduler/AnyJSON" }
            },
            "additionalProperties": false,
            "required": [
                "context",
                "data"
            ]
        },

        "ContextSpecificationList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/ContextSpecificationSingle" }
        },

        "ContextSpecificationListList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/ContextSpecificationList" }
        },

        "ContextSpecification": {
            "type": "object",
            "properties": {
                "schema":   { "$ref": "#/pScheduler/Cardinal" },
                "contexts": { "$ref": "#/pScheduler/ContextSpecificationListList" }
            },
            "additionalProperties": false,
            "required": [
                "contexts"
            ]
        },

        "Maintainer": {
            "type": "object",
            "properties": {
                "name":  { "type": "string" },
                "email": { "$ref": "#/pScheduler/Email" },
                "href":  { "$ref": "#/pScheduler/URL" }
            },
            "additionalProperties": false,
            "required": [
                "name"
            ]
        },

        "NameVersion": {
            "type": "object",
            "properties": {
                "name":    { "type": "string" },
                "version": { "$ref": "#/pScheduler/Version" }
            },
            "additionalProperties": false,
            "required": [
                "name",
                "version"
            ]
        },

        "ParticipantResult": {
            "type": "object",
            "properties": {
                "schema": { "$ref": "#/pScheduler/Cardinal" },
                "diags": { "$ref": "#/pScheduler/StringNull" },
                "error": { "$ref": "#/pScheduler/StringNull" },
                "succeeded": { "$ref": "#/pScheduler/Boolean" },
                "result":      { "$ref": "#/pScheduler/AnyJSON" }
            },
            "additionalProperties": false,
            "required": [
                "succeeded",
                "result"
            ]
        },

        "ScheduleSpecification_V1": {
            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 1 ]
                },
                "start":    { "$ref": "#/pScheduler/TimestampAbsoluteRelative" },
                "slip":     { "$ref": "#/pScheduler/Duration" },
                "sliprand": { "$ref": "#/pScheduler/Boolean" },
                "repeat":   { "$ref": "#/pScheduler/Duration" },
                "until":    { "$ref": "#/pScheduler/TimestampAbsoluteRelative" },
                "max-runs": { "$ref": "#/pScheduler/Cardinal" }
            },
            "additionalProperties": false
        },

        "ScheduleSpecification_V2": {
            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 2 ]
                },
                "start":    { "$ref": "#/pScheduler/TimestampAbsoluteRelative" },
                "slip":     { "$ref": "#/pScheduler/Duration" },
                "sliprand": { "$ref": "#/pScheduler/Boolean" },
                "repeat":   { "$ref": "#/pScheduler/Duration" },
                "repeat-cron": { "$ref": "#/pScheduler/POSIXCronSpecification" },
                "until":    { "$ref": "#/pScheduler/TimestampAbsoluteRelative" },
                "max-runs": { "$ref": "#/pScheduler/Cardinal" }
            },
            "required": [ "schema" ],
            "additionalProperties": false
        },

        "ScheduleSpecification": {
            "anyOf": [
                { "$ref": "#/pScheduler/ScheduleSpecification_V1" },
                { "$ref": "#/pScheduler/ScheduleSpecification_V2" }
            ]
        },

        "#": "TODO: There are still some data types undefined, mainly because we cannot",
        "#": "find agents that will return such data types yet",
        "SNMPNumericOID": {
            "type": "string",
            "pattern": "^((\\.\\d)|\\d)+(\\.\\d+)*$"
        },

        "#": "must contain at least one letter to be considered alphanumeric",
        "SNMPAlphaNumOID": {
            "type": "string",
            "pattern": "[a-z][A-Z]*"
        },

        "SNMPOID": {
            "# #1526: WAS: anyOf": [
                { "$ref": "#/pScheduler/SNMPNumericOID" },
                { "$ref": "#/pScheduler/SNMPAlphaNumOID"}
            ],
            "type": "string",
            "pattern": "^(((\\.\\d)|\\d)+(\\.\\d+)*)|([a-z][A-Z]*))$"
        },

        "SNMPInteger": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Integer$"
                },
                "value": { "$ref": "#/pScheduler/Integer" }
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPUnsigned32": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Unsigned32$"
                },
                "value": { "$ref": "#/pScheduler/UInt32"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPString": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^String$"
                },
                "value": { "$ref": "#/pScheduler/String"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPOpaque": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Opaque$"
                },
                "value": { "$ref": "#/pScheduler/String"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPIPAddress": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^IpAddress$"
                },
                "value": { "$ref": "#/pScheduler/IPAddress"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPCounter32": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Counter32$"
                },
                "value": { "$ref": "#/pScheduler/UInt32"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPCounter64": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Counter64$"
                },
                "value": { "$ref": "#/pScheduler/UInt64"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPGauge32": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Gauge32$"
                },
                "value": { "$ref": "#/pScheduler/UInt32"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPTimeticks": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^TimeTicks$"
                },
                "value": { "$ref": "#/pScheduler/Integer" }
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPBits": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "pattern": "^Bits$"
                },
                "value": { "$ref": "#/pScheduler/String"}
            },
            "additionalProperties": true,
            "required": [
                "type",
                "value"
            ]
        },

        "SNMPOther": {
            "type": "object",
            "properties": {
                "type": { "$ref": "#/pScheduler/AnyJSON" },
                "value": { "$ref": "#/pScheduler/AnyJSON" }
            },
            "additionalProperties": true,
            "required": [
                "value"
            ]
        },

        "SNMPResult": {
            "anyOf": [
                { "$ref": "#/pScheduler/SNMPOID" },
                { "$ref": "#/pScheduler/SNMPInteger" },
                { "$ref": "#/pScheduler/SNMPUnsigned32" },
                { "$ref": "#/pScheduler/SNMPString" },
                { "$ref": "#/pScheduler/SNMPOpaque" },
                { "$ref": "#/pScheduler/SNMPIPAddress" },
                { "$ref": "#/pScheduler/SNMPCounter32" },
                { "$ref": "#/pScheduler/SNMPCounter64" },
                { "$ref": "#/pScheduler/SNMPGauge32" },
                { "$ref": "#/pScheduler/SNMPTimeticks" },
                { "$ref": "#/pScheduler/SNMPBits" },
                { "$ref": "#/pScheduler/SNMPOther" }
            ]
        },

        "SNMPResultList": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/SNMPResult" }
        },

        "TaskSpecification_V1": {

            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 1 ]
                },
                "lead-bind":{ "$ref": "#/pScheduler/Host" },
                "test":     { "$ref": "#/pScheduler/TestSpecification" },
                "tool":     { "$ref": "#/pScheduler/String" },
                "tools":    { "$ref": "#/pScheduler/StringList" },
                "schedule": { "$ref": "#/pScheduler/ScheduleSpecification" },
                "archives": {
                    "type": "array",
                    "items": { "$ref": "#/pScheduler/ArchiveSpecification" }
                },
                "reference": { "$ref": "#/pScheduler/AnyJSON" },
                "_key": { "$ref": "#/pScheduler/String" }
            },
            "additionalProperties": false,
            "required": [
                "test"
            ]
        },

        "TaskSpecification_V2": {
            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 2 ]
                },
                "lead-bind":{ "$ref": "#/pScheduler/Host" },
                "test":     { "$ref": "#/pScheduler/TestSpecification" },
                "tool":     { "$ref": "#/pScheduler/String" },
                "tools":    { "$ref": "#/pScheduler/StringList" },
                "schedule": { "$ref": "#/pScheduler/ScheduleSpecification" },
                "archives": {
                    "type": "array",
                    "items": { "$ref": "#/pScheduler/ArchiveSpecification" }
                },
                "contexts": { "$ref": "#/pScheduler/ContextSpecification" },
                "reference": { "$ref": "#/pScheduler/AnyJSON" },
                "_key": { "$ref": "#/pScheduler/String" }
            },
            "additionalProperties": false,
            "required": [
                "schema",
                "test"
            ]
        },

        "TaskSpecification_V3": {
            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 3 ]
                },
                "lead-bind":{ "$ref": "#/pScheduler/Host" },
                "test":     { "$ref": "#/pScheduler/TestSpecification" },
                "tool":     { "$ref": "#/pScheduler/String" },
                "tools":    { "$ref": "#/pScheduler/StringList" },
                "schedule": { "$ref": "#/pScheduler/ScheduleSpecification" },
                "priority": { "$ref": "#/pScheduler/Integer" },
                "archives": {
                    "type": "array",
                    "items": { "$ref": "#/pScheduler/ArchiveSpecification" }
                },
                "contexts": { "$ref": "#/pScheduler/ContextSpecification" },
                "reference": { "$ref": "#/pScheduler/AnyJSON" },
                "_key": { "$ref": "#/pScheduler/String" }
            },
            "additionalProperties": false,
            "required": [
                "schema",
                "test"
            ]
        },

        "TaskSpecification_V4": {
            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 4 ]
                },
                "lead-bind":{ "$ref": "#/pScheduler/Host" },
                "test":     { "$ref": "#/pScheduler/TestSpecification" },
                "tool":     { "$ref": "#/pScheduler/String" },
                "tools":    { "$ref": "#/pScheduler/StringList" },
                "schedule": { "$ref": "#/pScheduler/ScheduleSpecification" },
                "priority": { "$ref": "#/pScheduler/Integer" },
                "archives": {
                    "type": "array",
                    "items": { "$ref": "#/pScheduler/ArchiveSpecification" }
                },
                "contexts": { "$ref": "#/pScheduler/ContextSpecification" },
                "reference": { "$ref": "#/pScheduler/AnyJSON" },
                "_key": { "$ref": "#/pScheduler/String" },
                "debug": { "$ref": "#/pScheduler/Boolean" }
            },
            "additionalProperties": false,
            "required": [
                "schema",
                "test"
            ]
        },

        "TaskSpecification_V5": {
            "type": "object",
            "properties": {
                "schema":   {
                    "type": "integer",
                    "enum": [ 5 ]
                },
                "lead-bind":{ "$ref": "#/pScheduler/Host" },
                "test":     { "$ref": "#/pScheduler/TestSpecification" },
                "tool":     { "$ref": "#/pScheduler/String" },
                "tools":    { "$ref": "#/pScheduler/StringList" },
                "schedule": { "$ref": "#/pScheduler/ScheduleSpecification" },
                "priority": { "$ref": "#/pScheduler/Integer" },
                "archives": {
                    "type": "array",
                    "items": { "$ref": "#/pScheduler/ArchiveSpecification" }
                },
                "keep-after-archive": { "$ref": "#/pScheduler/Duration" },
                "contexts": { "$ref": "#/pScheduler/ContextSpecification" },
                "reference": { "$ref": "#/pScheduler/AnyJSON" },
                "_key": { "$ref": "#/pScheduler/String" },
                "debug": { "$ref": "#/pScheduler/Boolean" }
            },
            "additionalProperties": false,
            "required": [
                "schema",
                "test"
            ]
        },

        "TaskSpecification": {
            "anyOf": [
                { "$ref": "#/pScheduler/TaskSpecification_V1" },
                { "$ref": "#/pScheduler/TaskSpecification_V2" },
                { "$ref": "#/pScheduler/TaskSpecification_V3" },
                { "$ref": "#/pScheduler/TaskSpecification_V4" },
                { "$ref": "#/pScheduler/TaskSpecification_V5" }
            ]
        },

        "TestSpecification": {
            "type": "object",
            "properties": {
                "type": { "$ref": "#/pScheduler/String" },
                "spec": { "$ref": "#/pScheduler/AnyJSON" }
            },
            "additionalProperties": false,
            "required": [
                "type",
                "spec"
            ]
        },

        "#": "Standard Values",

        "#": "Note that these are lowercase with hyphens, matching the style",
        "#": "of the names used.",

        "icmp-error": {
            "type": "string",
            "enum": [
                "net-unreachable",
                "host-unreachable",
                "protocol-unreachable",
                "port-unreachable",
                "fragmentation-needed-and-df-set",
                "source-route-failed",
                "destination-network-unknown",
                "destination-host-unknown",
                "source-host-isolated",
                "destination-network-administratively-prohibited",
                "destination-host-administratively-prohibited",
                "network-unreachable-for-type-of-service",
                "icmp-destination-host-unreachable-tos",
                "communication-administratively-prohibited",
                "host-precedence-violation",
                "precedence-cutoff-in-effect"
            ]
        },

        "ip-version": {
            "type": "integer",
            "enum": [ 4, 6 ]
        },

        "ip-version-list": {
            "type": "array",
            "items": { "$ref": "#/pScheduler/ip-version" }
        },

        "#": "Standard Plugin Enumeration Types",

        "PluginEnumeration": {

            "Test": {
                "type": "object",
                "properties": {
                    "schema":       { "$ref": "#/pScheduler/Cardinal" },
                    "name":         { "$ref": "#/pScheduler/String" },
                    "description":  { "$ref": "#/pScheduler/String" },
                    "version":      { "$ref": "#/pScheduler/Version" },
                    "maintainer":   { "$ref": "#/pScheduler/Maintainer" },
                    "scheduling-class": {
                        "type": "string",
                        "enum": [
                            "background",
                            "background-multi",
                            "exclusive",
                            "normal"
                        ]
                    }
                },
                "additionalProperties": false,
                "required": [
                    "name",
                    "description",
                    "version",
                    "maintainer",
                    "scheduling-class"
                ]
            },

            "Tool": {
                "type": "object",
                "properties": {
                    "schema":       { "$ref": "#/pScheduler/Cardinal" },
                    "name":         { "$ref": "#/pScheduler/String" },
                    "description":  { "$ref": "#/pScheduler/String" },
                    "version":      { "$ref": "#/pScheduler/Version" },
                    "tests":        { "$ref": "#/pScheduler/StringList" },
                    "preference":        { "$ref": "#/pScheduler/Integer" },
                    "maintainer":   { "$ref": "#/pScheduler/Maintainer" },
                    "scheduling-class": {
                        "type": "string",
                        "enum": [
                            "background",
                            "background-multi",
                            "exclusive",
                            "normal"
                        ]
                    }
                },
                "additionalProperties": false,
                "required": [
                    "name",
                    "description",
                    "version",
                    "tests",
                    "preference",
                    "maintainer"
                ]
            },

            "Archiver": {
                "type": "object",
                "properties": {
                    "schema":       { "$ref": "#/pScheduler/Cardinal" },
                    "name":         { "$ref": "#/pScheduler/String" },
                    "description":  { "$ref": "#/pScheduler/String" },
                    "version":      { "$ref": "#/pScheduler/Version" },
                    "maintainer":   { "$ref": "#/pScheduler/Maintainer" }
                },
                "additionalProperties": false,
                "required": [
                    "name",
                    "description",
                    "version",
                    "maintainer"
                ]
            },

            "Context": {
                "type": "object",
                "properties": {
                    "schema":       { "$ref": "#/pScheduler/Cardinal" },
                    "name":         { "$ref": "#/pScheduler/String" },
                    "description":  { "$ref": "#/pScheduler/String" },
                    "version":      { "$ref": "#/pScheduler/Version" },
                    "maintainer":   { "$ref": "#/pScheduler/Maintainer" }
                },
                "additionalProperties": false,
                "required": [
                    "name",
                    "description",
                    "version",
                    "maintainer"
                ]
            }
        }
    }
}
