#!/usr/bin/env python3
#
# Convert comamnd-line options to a test specification
#

import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""Examples:

  task trace --dest www.example.com
      Trace from here to www.example.com

  task trace --source ps2.example.org --dest www.example.com
      Trace from ps2.example.org to www.example.com

  task trace --length 512 --dest www.example.com
      Use 512-byte probe packets

  task trace --sendwait PT3S --dest www.example.com
      Wait 3 seconds between probes
""",
    formatter_class=argparse.RawTextHelpFormatter)


arg_parser.add_argument("--algorithm",
                      help="Trace algorithm",
                      action="store", type=str,
                      dest="algorithm")

arg_parser.add_argument("--as",
                      help="Find AS for each hop",
                      default=None,
                      action="store_true",
                      dest="as_")
arg_parser.add_argument("--no-as",
                      help="Don't find AS for each hop",
                      default=None,
                      action="store_false",
                      dest="as_")

arg_parser.add_argument("-d","--dest",
                      help="Destination host",
                      action="store", type=str,
                      dest="dest")

arg_parser.add_argument("--ip-version",
                      help="IP Version",
                      action="store", type=int,
                      dest="ipversion")

arg_parser.add_argument("--length",
                      help="Packet length",
                      action="store", type=int,
                      dest="length")

arg_parser.add_argument("--probe-type",
                      help="Probe type",
                      action="store", type=str,
                      dest="probetype")

arg_parser.add_argument("--fragment",
                      help="Allow fragmentation",
                      default=None,
                      action="store_true",
                      dest="fragment")
arg_parser.add_argument("--no-fragment",
                      help="Don't allow fragmentation",
                      default=None,
                      action="store_false",
                      dest="fragment")

arg_parser.add_argument("--first-ttl",
                      help="First TTL value",
                      action="store", type=int,
                      dest="firstttl")

arg_parser.add_argument("--flow-label",
                      help="IPv6 flow label (ignored for IPv4)",
                      action="store", type=int,
                      dest="flowlabel")

arg_parser.add_argument("-s","--source",
                      help="Source address",
                      action="store", type=str,
                      dest="source")

arg_parser.add_argument("--source-node",
                      help="Source address",
                      action="store", type=str,
                      dest="source_node")

arg_parser.add_argument("--hops",
                      help="Maximum number of hops",
                      action="store", type=int,
                      dest="hops")

arg_parser.add_argument("--queries",
                      help="Queries sent per hop",
                      action="store", type=int,
                      dest="queries")

arg_parser.add_argument("--hostnames",
                      help="Resolve IPs to host names",
                      default=None,
                      action="store_true",
                      dest="hostnames")
arg_parser.add_argument("--no-hostnames",
                      help="Don't resolve IPs to host names",
                      default=None,
                      action="store_false",
                      dest="hostnames")

arg_parser.add_argument("--dest-port",
                      help="Destination port",
                      action="store", type=int,
                      dest="destport")

arg_parser.add_argument("--wait",
                      help="Wait time",
                      action="store", type=str,
                      dest="wait")

arg_parser.add_argument("--sendwait",
                      help="Wait time between probes",
                      action="store", type=str,
                      dest="sendwait")


arg_parser.add_argument("--ip-tos",
                      help="IP type-of-service octet (integer)",
                      action="store", type=int,
                      dest="ip_tos")


args = arg_parser.parse_args(args)


result = { }
schema = pscheduler.HighInteger(1)


if args.algorithm is not None:
   result['algorithm'] = args.algorithm

if args.dest is not None:
   result['dest'] = args.dest

if args.ipversion is not None:
   result['ip-version'] = args.ipversion

if args.length is not None:
   result['length'] = args.length

if args.probetype is not None:
   result['probe-type'] = args.probetype

if args.fragment is not None:
   result['fragment'] = args.fragment

if args.firstttl is not None:
   result['first-ttl'] = args.firstttl

if args.flowlabel is not None:
   result['flow-label'] = args.flowlabel
   schema.set(2)

if args.source is not None:
   result['source'] = args.source

if args.source_node is not None:
   result['source-node'] = args.source_node

if args.hops is not None:
   result['hops'] = args.hops

if args.queries is not None:
   result['queries'] = args.queries

if args.hostnames is not None:
   result['hostnames'] = args.hostnames

if args.destport is not None:
   result['dest-port'] = args.destport

if args.wait is not None:
   result['wait'] = args.wait

if args.sendwait is not None:
   result['sendwait'] = args.sendwait

if args.ip_tos is not None:
   result['ip-tos'] = args.ip_tos

if args.as_ is not None:
   result['as'] = args.as_

result["schema"] = schema.value()


pscheduler.succeed_json(result)
