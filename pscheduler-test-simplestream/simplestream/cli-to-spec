#!/usr/bin/env python3
#
# Convert comamnd-line options to a test specification

import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""Examples:

  task simplestream --dest ps.example.com
      Send data from here to ps.example.com

  task simplestream --test-material "Hello, world!" --dest ps.example.com
      Use a custom string for the data to be sent

  task simplestream --dawdle PT30S --dest ps.example.com
      Wait up to 30 seconds before sending the data

  task simplestream --fail 0.65 --dest ps.example.com
      Force failure 65% of the time
""",
    formatter_class=argparse.RawTextHelpFormatter)



arg_parser.add_argument("-e", "--dest",
                      help="Destination host",
                      action="store", type=str,
                      dest="dest")

arg_parser.add_argument("--dest-node",
                      help="Destination pScheduler node",
                      action="store", type=str,
                      dest="dest_node")

arg_parser.add_argument("-d", "--dawdle",
                      help="Time to dawdle (ISO8601 Duration)",
                      action="store", type=str,
                      dest="dawdle")

arg_parser.add_argument("-i", "--ip-version",
                      help="Force IP version (4 or 6)",
                      action="store", type=int,
                      dest="ip_version")

arg_parser.add_argument("-m", "--test-material",
                      help="Test material to be sent",
                      action="store", type=str,
                      dest="test_material")

arg_parser.add_argument("-s", "--source",
                      help="Source host",
                      action="store", type=str,
                      dest="source")

arg_parser.add_argument("--source-node",
                      help="Source pScheduler node",
                      action="store", type=str,
                      dest="source_node")

arg_parser.add_argument("-t", "--timeout",
                      help="Time for receiver to wait (ISO8601 Duration)",
                      action="store", type=str,
                      dest="timeout")

arg_parser.add_argument("-f", "--fail",
                      help="Probability of forced failure",
                      action="store", type=float,
                      dest="fail")

opt_parser.add_option("-p", "--port",
                      help="port",
                      action="store", type="int",
                      dest="port")

args = arg_parser.parse_args(args)

spec_schema = pscheduler.HighInteger(1)
result = {}

if args.dest is not None:
   result['dest'] = args.dest

if args.dest_node is not None:
   result['dest-node'] = args.dest_node

if args.dawdle is not None:
   result['dawdle'] = args.dawdle

if args.ip_version is not None:
   result['ip-version'] = args.ip_version
   spec_schema.set(2)

if args.source is not None:
   result['source'] = args.source

if args.source_node is not None:
   result['source-node'] = args.source_node

if args.test_material is not None:
   result['test-material'] = args.test_material

if args.timeout is not None:
   result['timeout'] = args.timeout

if args.fail is not None:
   result['fail'] = args.fail

if options.port is not None:
   result['port'] = options.port
   spec_schema.set(3)

result['schema'] = spec_schema.value()

pscheduler.succeed_json(result)
