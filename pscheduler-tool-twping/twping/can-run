#!/usr/bin/env python3
#
# Determine if this tool can run a test based on a test spec.
#

import datetime
import sys

import pscheduler

json = pscheduler.json_load(exit_on_error=True)

try:
    if json['type'] not in [ 'latency', 'rtt' ]:
        pscheduler.succeed_json({
            "can-run": False,
            "reasons": [ "Unsupported test type" ]
        })
except KeyError:
    pscheduler.succeed_json({
        "can-run": False,
        "reasons": [ "Missing test type" ]
    })

try:
    spec = json["spec"]
    pscheduler.json_check_schema(spec, 4)
except KeyError:
    pscheduler.succeed_json({
        "can-run": False,
        "reasons": ["Missing test specification"]
    })
except ValueError as ex:
    pscheduler.succeed_json({
        "can-run": False,
        "reasons": [str(ex)]
    })

errors = []

test_type = json['type']

if 'port' in spec:
    errors.append("Ports are not supported")

try:
    if spec['protocol'] != 'twamp':
        errors.append("Only twamp protocol is supported")
except KeyError:
    pass

if test_type == 'rtt':
    if spec.get('fragment', False):
        errors.append("Fragmentation control is not supported.")


result = {
    "can-run": len(errors) == 0
}

if len(errors) > 0:
    result["reasons"] = errors

pscheduler.succeed_json(result)
