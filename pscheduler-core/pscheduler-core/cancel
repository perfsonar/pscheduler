#!/usr/bin/env python3
#
# Cancel a task
#

import argparse
import pscheduler
import urllib


pscheduler.set_graceful_exit()


#
# Gargle the arguments
#

arg_parser = argparse.ArgumentParser(
    usage="%(prog)s task",
    epilog=
"""
Example:

  cancel https://ps.foo.org/pscheduler/task/12345...
      Cancel a task
""",
    formatter_class=argparse.RawTextHelpFormatter
    )

arg_parser.add_argument("--bind",
                      help="Make the request from the provided address",
                      default=None,
                      action="store", type=str,
                      dest="bind")

arg_parser.add_argument("--key",
                      help="Key required for write access to the task (Optional @/path/to/file)",
                      action="store", type=str,
                      dest="key")

arg_parser.add_argument("task",
                        help="URL of task",
                        nargs="?")



args = arg_parser.parse_args()

if not args.task:
    arg_parser.print_usage()
    pscheduler.fail()

task_url = args.task
params = {}

# TODO: Find out why Pyling complains about this but Python doesn't.
parsed = list(urllib.parse.urlsplit(task_url))

path_parts = parsed[2].split("/")

if (len(path_parts) != 4) \
        or (path_parts[0:3] != ["", "pscheduler", "tasks"]):
    pscheduler.fail("%s: Not a task URL" % task_url)


if args.key is not None:
    try:
        params["key"] = pscheduler.string_from_file(args.key)
    except IOError as ex:
        pscheduler.fail("Unable to read key file: " + str(ex))


status, result = pscheduler.url_delete(task_url, bind=args.bind,
                                       params=params,
                                       throw=False)

if status == 200:
    pscheduler.succeed()
elif status == 404:
    pscheduler.fail("Task not found.")
else:
    pscheduler.fail(result)
