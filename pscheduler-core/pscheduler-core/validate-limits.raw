#!/usr/bin/env python3
#
# Check that a limit file is valid.
#
# Usage: validate-limits [ FILE ]
#
# Where FILE is the path to the limits file to be validated or '-' for
# standard input.  If none is provided, the system default limit file
# will be read.
#

import argparse
import pscheduler
import sys

from pscheduler.limitprocessor.limitprocessor import LimitProcessor

pscheduler.set_graceful_exit()

#
# Gargle the arguments
#

arg_parser = argparse.ArgumentParser(
    usage="%(prog)s [ limits ]",
    epilog=
"""
Examples:

  validate-limits /foo/bar/limits.conf
      Validate /foo/bar/limits.conf

  validate-limits -
      Validate limit configuration from the standard input

  validate-limits
      Validate __LIMITS_FILE__ if readable.
""",
    formatter_class=argparse.RawTextHelpFormatter
    )

arg_parser.add_argument("--quiet",
                      help="Print nothing if successful",
                      action="store_true",
                      dest="quiet")


arg_parser.add_argument("limits",
                        help="Path to limit file or '-' for standard input",
                        default="__LIMITS_FILE__",
                        nargs="?")

args = arg_parser.parse_args()


try:
    if args.limits == "-":
        infile = sys.stdin
    else:
        infile = open(args.limits, 'r')
except IOError as ex:
    pscheduler.fail("Unable to read input: %s" % (str(ex)))

try:
    processor = LimitProcessor(infile)
except Exception as ex:
    pscheduler.fail(f'Limit configuration is invalid:\n{str(ex)}')

if sys.stdout.isatty() and not args.quiet:
    print("Limit configuration is valid.")

pscheduler.succeed()
