#!/usr/bin/env python3
#
# Convert command-line options to an snmpget test specification
#

import re
import argparse
import pscheduler
import sys

if len(sys.argv) > 1:
   # Args are on the command line
   args = sys.argv[1:]

else:
   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]


# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""Examples:

  task snmpgetbgm --version 2c --community public example.net
    text

""",
    formatter_class=argparse.RawTextHelpFormatter)


arg_parser.add_argument("--host",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("--dest",
                      help="Destination that will be queried.",
                      action="store", type=str,
                      dest="dest")
                    
arg_parser.add_argument("--version",
                      help="Version of SNMP to be used. (1|2c|3)",
                      action="store", type=str,
                      dest="version")

arg_parser.add_argument("--period",
                        help="Seconds between polling periods.",
                        action="store", type=int,
                        dest="period", default=1)

arg_parser.add_argument("--polls",
                        help="Number of polls.",
                        action="store", type=int,
                        dest="polls", default=1)

arg_parser.add_argument("--oid",
                      help="OID to be queried, can be repeated for multiple.",
                      default=[],
                      action="append", type=str,
                      dest="oid")

arg_parser.add_argument("--protocol",
                      help="Transport specifier (tcp|udp)",
                      action="store", type=str,
                      dest="protocol")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type=str,
                      dest="timeout")

# snmp v3 specific options
arg_parser.add_argument("--security-name",
                  help="Security Name",
                  action="store", type=str,
                  dest="security_name")
                
arg_parser.add_argument("--auth-protocol",
                  help="Authentication Protocol (md5|sha)",
                  action="store", type=str,
                  dest="auth_protocol")

arg_parser.add_argument("--priv-protocol",
                  help="Privacy Protocol (des|3des|aes|aes128|aes192|aes256)",
                  action="store", type=str,
                  dest="priv_protocol")

arg_parser.add_argument("--auth-key",
                  help="Authentication Passphrase",
                  action="store", type=str,
                  dest="auth_key")

arg_parser.add_argument("--priv-key",
                  help="Privacy Passphrase",
                  action="store", type=str,
                  dest="priv_key")

arg_parser.add_argument("--security-level",
                  help="Security Level (noAuthNoPriv|authNoPriv|authPriv)",
                  action="store", type=str,
                  dest="security_level")

arg_parser.add_argument("--context",
                  help="Context Name",
                  action="store", type=str,
                  dest="context")

# snmp v1 and v2c specific option
arg_parser.add_argument("--community",
                      help="Community string",
                      action="store", type=str,
                      dest="community")

args = arg_parser.parse_args(args)

result = { 'schema': 1 }


if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host-node'] = args.host_node

if args.dest is not None:
   result['dest'] = args.dest

if args.version is not None:
   result['version'] = args.version

if args.oid is not None and len(args.oid):
   result['oid'] = args.oid

if args.protocol is not None:
   result['protocol'] = args.protocol

if args.timeout is not None:
   result['timeout'] = args.timeout

# If no # polls specified, it is an snmpget test and defaults to 1
if args.polls is not None:
    result['polls'] = args.polls

if args.period is not None:
    result['period'] = args.period

if args.version in [None, '1', '2c']:
  if args.community is not None:
    result['_community'] = args.community

else:
    if args.security_name is not None:
      result['security-name'] = args.security_name

    if args.auth_protocol is not None:
      result['auth-protocol'] = args.auth_protocol

    if args.priv_protocol is not None:
      result['priv-protocol'] = args.priv_protocol

    if args.auth_key is not None:
      result['_auth-key'] = args.auth_key

    if args.priv_key is not None:
      result['_priv-key'] = args.priv_key

    if args.security_level is not None:
      result['security-level'] = args.security_level

    if args.context is not None:
      result['context'] = args.context

pscheduler.succeed_json(result)
