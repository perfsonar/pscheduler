#!/usr/bin/python
#
# Run an iperf2 test
#

import datetime
import logging
import json
import pscheduler
import re
import shutil
import sys
import time
import iperf2_parser
import traceback
import ipaddress
import iperf2_utils
from iperf2_defaults import *

# track when this run starts
start_time = datetime.datetime.now()

logger = pscheduler.Log(prefix='tool-iperf2', quiet=True)

logger.debug("starting iperf2 tool")

# parse JSON input
input = pscheduler.json_load(exit_on_error=True)

logger.debug("Input is %s" % input)

try:
    participant = input['participant']
    participant_data = input['participant-data']
    test_spec = input['test']['spec']
    duration = pscheduler.iso8601_as_timedelta(input['schedule']['duration'])
    limits_passed = input.get('limits-passed', [])
except KeyError as e:
    pscheduler.fail("Missing required key in run input: %s" % e)
except:
    pscheduler.fail("Error parsing run input: %s" % sys.exc_info()[0])

single_ended = test_spec.get('single-ended', False)
participants = len(participant_data)
if not(participants == 2 or (participants == 1 and single_ended)):
    pscheduler.fail("iperf2 requires exactly 2 participants, got %s" % (len(participant_data)))


config = iperf2_utils.get_config()

# look up our local iperf2 command path
iperf2_cmd  = config["iperf2_cmd"]

# grab the server port from the test spec if there, otherwise use default
if single_ended:
    server_port = test_spec.get('single-ended-port', DEFAULT_SERVER_PORT)
else:
    server_port = participant_data[1].get('server_port', DEFAULT_SERVER_PORT)


def run_client():    

    logger.debug("Waiting %s sec for server on other side to start" % DEFAULT_WAIT_SLEEP)

    time.sleep(DEFAULT_WAIT_SLEEP) #wait for server to start on other side

    iperf2_args = [ iperf2_cmd ]

    iperf2_args.append('-p')
    iperf2_args.append(server_port)

    # who to connect to
    destination = test_spec['dest']

    try:
        ipaddress.ip_address(unicode(destination))
        is_ip_address = True
    except ValueError:
        is_ip_address = False
    
    # iperf2 has no inherent ability to force v4 or v6, so we do it here but
    # don't bother doing lookups on just a straight IP address, seems like
    # a silly combination of flags but whatever
    if test_spec.has_key('ip-version') and test_spec['ip-version'] != None:     
        if not is_ip_address and test_spec['ip-version'] == 4:
            destination = pscheduler.dns_resolve(destination, ip_version=4)
        
            logger.debug("Resolved %s to %s" % (test_spec["dest"], destination))
                    
            if destination == None:
                pscheduler.succeed_json({"succeeded": False,
                                         "error": "Unable to resolve %s to an IPv4 address" % test_spec["dest"]
                                         })

        elif not is_ip_address and test_spec['ip-version'] == 6:
            destination = pscheduler.dns_resolve(destination, ip_version=6)
                    
            logger.debug("Resolved %s to %s" % (test_spec["dest"], destination))

            if destination == None:
                pscheduler.succeed_json({"succeeded": False,
                                         "error": "Unable to resolve %s to an IPv6 address" % test_spec["dest"]
                                         })



    iperf2_args.append('-c')
    iperf2_args.append(destination)

    # duration
    test_duration = test_spec.get('duration')
    if test_duration:
        delta = pscheduler.iso8601_as_timedelta(test_duration)
        test_duration = int(pscheduler.timedelta_as_seconds(delta))
    else:
        test_duration = DEFAULT_DURATION

    iperf2_args.append('-t')
    iperf2_args.append(test_duration)

    # always show mss because why not
    iperf2_args.append('-m')

    if test_spec.has_key('interval') and test_spec['interval'] != None:
        iperf2_args.append('-i')
        delta = pscheduler.iso8601_as_timedelta(test_spec['interval'])
        iperf2_args.append(int(pscheduler.timedelta_as_seconds(delta)))

    if test_spec.has_key('parallel') and test_spec['parallel'] != None:
        iperf2_args.append('-P')
        iperf2_args.append(test_spec['parallel'])

    if test_spec.has_key('window-size') and test_spec['window-size'] != None:
        iperf2_args.append('-w')
        iperf2_args.append(test_spec['window-size'])

    if test_spec.has_key('mss') and test_spec['mss'] != None:
        iperf2_args.append('-M')
        iperf2_args.append(test_spec['mss'])

    if test_spec.has_key('bandwidth') and test_spec['bandwidth'] != None:
        iperf2_args.append('-u') # iperf only support UDP bandwidth throttling, this is checked for earlier too
        iperf2_args.append('-b')
        iperf2_args.append(test_spec['bandwidth'])
    else:
        # Find the largest bandwidth in each participant's passed
        # limits and take the minimum of those values.  This will be
        # the maximum bandwidth allowed by any participant.

        logger.debug("Finding maximum bandwidth")

        max_bandwidths = []

        for passed_set in limits_passed:
            set_max = -1
            logger.debug("Limit set:")
            for passed in passed_set:
                try:
                    new_max = pscheduler.si_as_number(passed['bandwidth']['range']['upper'])
                    logger.debug("  Limit says %d", new_max)
                    set_max = max(set_max, new_max)
                except KeyError:
                    logger.debug("  No upper bandwidth limit specified")
                    continue

            if set_max > -1:
                max_bandwidths.append(set_max)

        if max_bandwidths:
            max_bandwidth = sorted(max_bandwidths)[0]
            logger.debug("Limiting bandwidth to %d", max_bandwidth)
            iperf2_args.append('-b')
            iperf2_args.append(max_bandwidth)


    if test_spec.has_key('buffer-length') and test_spec['buffer-length'] != None:
        iperf2_args.append('-l')
        iperf2_args.append(test_spec['buffer-length'])

    if test_spec.has_key('local-address') and test_spec['local-address'] != None:
        iperf2_args.append('-B')
        iperf2_args.append(test_spec['local-address'])

    if test_spec.has_key('congestion') and test_spec['congestion'] != None:
        iperf2_args.append('-Z')
        iperf2_args.append(test_spec['congestion'])

    
    # join and run_program want these all to be string types, so
    # just to be safe cast everything in the list to a string
    iperf2_args = map(lambda x: str(x), iperf2_args)

    command_line = " ".join(iperf2_args)
    logger.debug("Running command: %s" % command_line)      

    try:
        status, stdout, stderr = pscheduler.run_program(iperf2_args)
    except Exception as e:
        pscheduler.succeed_json({"succeeded": False,
                                 "diags": " ".join(iperf2_args),
                                 "error": "%s\n%s" % (stdout, stderr)
                                 })
    
    #see if command completed successfully
    logger.debug("iperf2 returned status %d" % status)

    # For whatever reason, iperf2 doesn't always exit with the right code
    # in the event of failures so we can also look to see if anything
    # showed up in stderr
    if status or stderr:
        pscheduler.succeed_json({"succeeded": False,
                                 "diags": " ".join(iperf2_args),
                                 "error": "iperf2 returned an error: %s" % stderr
                                 })

    logger.debug("Stdout = %s" % stdout)
    logger.debug("Stderr = %s" % stderr)

    lines = stdout.split("\n")    

    logger.debug("Lines are %s " % lines)

    results = iperf2_parser.parse_output(lines)
    results['diags'] = "%s\n\n%s" % (command_line, stdout)

    return results

def run_server():

    #init command
    iperf2_args = [ iperf2_cmd, '-s' ]

    iperf2_args.append('-p')
    iperf2_args.append(server_port)

    # join and run_program want these all to be string types, so
    # just to be safe cast everything in the list to a string
    iperf2_args = map(lambda x: str(x), iperf2_args)

    logger.debug("Running command: %s" % " ".join(iperf2_args))

    try:
        status, stdout, stderr = pscheduler.run_program(iperf2_args,
                                                        timeout = pscheduler.timedelta_as_seconds(duration - (datetime.datetime.now() - start_time)),
                                                        timeout_ok = True)
    except Exception as e:
        logger.error("iperf2 failed to complete execution: %s" % e);
        pscheduler.succeed_json({"succeeded": False,
                                 "diags": " ".join(iperf2_args),
                                 "error": "The iperf2 command failed during execution. See server logs for more details."
                                 })

    # For whatever reason, iperf2 doesn't always exit with the right code
    # in the event of failures so we can also look to see if anything
    # showed up in stderr
    if status or stderr:
        pscheduler.succeed_json({"succeeded": False,
                                 "diags": " ".join(iperf2_args),
                                 "error": "iperf2 returned an error: %s" % stderr
                                 })
    
    #log stdout in debug mode
    for line in stdout:
        logger.debug(line)
          
    return {"succeeded": True}



#determine whether we are the client or server mode for iperf2
results = {}
try:
    if participant == 0:
        results = run_client()
    elif participant == 1:
        results = run_server()
    else:
        pscheduler.fail("Invalid participant.")
except Exception as ex:
    _, _, ex_traceback = sys.exc_info()
    if ex_traceback is None:
        ex_traceback = ex.__traceback__
    tb_lines = [ line.rstrip('\n') for line in
                 traceback.format_exception(ex.__class__, ex, ex_traceback)]
    logger.debug(tb_lines)
    logger.error("Exception %s" % ex);

logger.debug("Results: %s" % results)

pscheduler.succeed_json(results)
