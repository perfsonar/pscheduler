#!/usr/bin/env python3
#
# Format a spec
#

import jsontemplate
import pscheduler
import sys

from validate import spec_is_valid


try:
   format = sys.argv[1]
except IndexError:
   format = 'text/plain'


json = pscheduler.json_load(exit_on_error=True, max_schema=1)

valid, message = spec_is_valid(json)

if not valid:
    pscheduler.fail(message)


if format == 'text/plain':

   template = """
Destination ................... {.section dest}{dest}{.or}Not Specified{.end}
Source ........................ {.section source}{source}{.or}Not Specified{.end}
Source Node.................... {.section source-node}{source-node}{.or}Not Specified{.end}
Timeout .,..................... {.section timeout}{timeout}{.or}Not Specified{.end}
"""

elif format == 'text/html':

   template = """
<table>
<tr><td>Destination</td><td>{.section dest}{dest}{.or}Not Specified{.end}</td></tr>
<tr><td>Source</td><td>{.section source}{source}{.or}Not Specified{.end}</td></tr>
<tr><td>Timeout</td><td>{.section timeout}{timeout}{.or}Not Specified{.end}</td></tr>
</table>
   """

else:

   pscheduler.fail("Unsupported format '%s'" % format)


# TODO: Should probably handle exceptions in a nicer way.
print(jsontemplate.expand(template, json).strip())
