#!/usr/bin/env python3
#
# Convert comamnd-line options to a test specification
#

import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""Examples:

  task clock --dest ps.example.com
      Measure the difference between the local host and ps.example.com.

  task clock --dest ps.example.com --timeout PT5S
      Measure the difference between the local host and ps.example.com
      with a timeout of five seconds for each host.

  task clock --source ps2.example.org --dest ps.example.com
      Measure the time difference between ps2.example.org and
      ps.example.com.
""",
    formatter_class=argparse.RawTextHelpFormatter)



arg_parser.add_argument("--dest",
                      help="Destination host",
                      action="store", type=str,
                      dest="dest")

arg_parser.add_argument("--source",
                      help="Source address or interface",
                      action="store", type=str,
                      dest="source")

arg_parser.add_argument("--source-node",
                      help="Source pScheduler node, if different",
                      action="store", type=str,
                      dest="source_node")

arg_parser.add_argument("--timeout",
                      help="Timeout for each round trip",
                      action="store", type=str,
                      dest="timeout")


args = arg_parser.parse_args(args)


schema = pscheduler.HighInteger(1)

result = {}

if args.dest is not None:
   result['dest'] = args.dest

if args.source is not None:
   result['source'] = args.source

if args.source_node is not None:
   result['source-node'] = args.source_node
   schema.set(2)

if args.timeout is not None:
   result['timeout'] = args.timeout

result['schema'] = schema.value()


pscheduler.succeed_json(result)
