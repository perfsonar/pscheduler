#!/usr/bin/env python3

#
# Development Order #4:
# 
# This file encodes CLI arguments as JSON data in a test spec,
# as defined by the datatypes in validate.py
# 
# This can be tested directly using the following syntax:
# ./cli-to-spec --option argument
#

import re
import argparse
import pscheduler
import sys

input_args = []

if len(sys.argv) > 1:

   # Args are on the command line
   input_args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   input_args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   input_args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""
Finds the path MTU (Maximum Transmission Unit) from this machine to a specified destination.
Can specify a port.

pscheduler task mtu --dest www.google.com
    Finds the MTU to www.google.com

pscheduler task mtu --dest www.google.com --port 80
    Finds the MTU to www.google.com at port 80
""",
formatter_class=argparse.RawTextHelpFormatter
)


arg_parser.add_argument("--source",
                      help="Sending host",
                      action="store", type="string",
                      dest="source")

arg_parser.add_argument("--source-node",
                      help="pScheduler node on sending host, if different",
                      action="store", type="string",
                      dest="source_node")

arg_parser.add_argument("--dest",
                      help="Receiving host",
                      action="store", type="string",
                      dest="dest")

arg_parser.add_argument("-i", "--ip-version",
                      help="Force IP version (4 or 6)",
                      action="store", type="int",
                      dest="ip_version")

arg_parser.add_argument("--port",
                      help="Receiving port. Defaults to 1060.",
                      action="store", type="int",
                      dest="port")

args = arg_parser.parse_args(input_args)

spec_schema = pscheduler.HighInteger(1)
result = {}

if args.source is not None:
   result['source'] = args.source

if args.source_node is not None:
   result['source-node'] = args.source_node

if args.dest is not None:
   result['dest'] = args.dest

if args.port is not None:
   result['port'] = args.port

if args.ip_version is not None:
   result['ip-version'] = args.ip_version
   spec_schema.set(2)

result['schema'] = spec_schema.value()

pscheduler.succeed_json(result)
