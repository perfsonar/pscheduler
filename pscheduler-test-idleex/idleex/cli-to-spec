#!/usr/bin/env python3
#
# Convert comamnd-line options to a test specification

import argparse
import pscheduler
import sys

if len(sys.argv) > 1:

   # Args are on the command line
   args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser(epilog=
"""Examples:

  task idleex --duration PT1M15S
      Do nothing locally for one minute and 15 seconds

  task idleex --duration PT20S --host ps2.example.org
      Make ps2.example.org be idle for 20 seconds

  task idleex --duration PT20S --starting-comment "Let's get lazy."
      Emit a custom comment before idling

  task idleex --duration PT20S --parting-comment "I got nothing done."
      Emit a custom comment after idling

""",
    formatter_class=argparse.RawTextHelpFormatter)


arg_parser.add_argument("-d", "--duration",
                      help="Idle duration (ISO8601)",
                      action="store", type=str,
                      dest="duration")


# The short version is capitalized because -h is for help.
arg_parser.add_argument("-H", "--host",
                      help="Host which should be idle",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="pScheduler node",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("-s", "--starting-comment",
                      help="Starting comment",
                      action="store", type=str,
                      dest="starting_comment")

arg_parser.add_argument("-p", "--parting-comment",
                      help="Parting comment",
                      action="store", type=str,
                      dest="parting_comment")

args = arg_parser.parse_args(args)

result = { 'schema': 1 }

if args.duration is not None:
   result['duration'] = args.duration

if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host_node'] = args.host_node

if args.starting_comment is not None:
   result['starting-comment'] = args.starting_comment

if args.parting_comment is not None:
   result['parting-comment'] = args.parting_comment

pscheduler.succeed_json(result)


