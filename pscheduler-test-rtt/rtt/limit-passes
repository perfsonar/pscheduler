#!/usr/bin/env python3
#
# Checker for 'rtt' task limits
#

import pscheduler

#
# Load and validate everything
#

try:
    json = pscheduler.json_load(max_schema=1)
except ValueError as ex:
    pscheduler.fail("Invalid JSON %s" % str(ex))

spec = json["spec"]
limit = json["limit"]


#
# Evaluate everything
#

#
# Handle source, dest and endpoint limits
#
errors = pscheduler.check_endpoint_limits(limit, spec)

#
# Handle numeric ranges
#
numeric_ranges = [
    ("count", "Count"),
    ("length", "Length"),
    ("ttl", "Time to live"),
]
for nr in numeric_ranges:
    errors += pscheduler.check_numeric_limit(limit, spec, nr[0], description=nr[1])

#
# Handle numeric lists
#
numeric_ranges = [
    ("flow-label", "Flow label"),
    ("ip-tos", "IP TOS"),
]
for nr in numeric_ranges:
    errors += pscheduler.check_numeric_list_limit(limit, spec, nr[0], description=nr[1])
    
#
# Handle boolean fields
booleans = [
    ("hostnames", "Hostname resolution"),
    ("suppress-loopback", "Suppress loopback"),
]
for b in booleans:
    errors += pscheduler.check_boolean_limit(limit, spec, b[0], description=b[1])

#
# Handle duration fields
durations = [
    ("interval", "Interval"),
    ("timeout", "Timeout"),
    ("deadline", "Deadline"),
]
for d in durations:
    errors += pscheduler.check_duration_limit(limit, spec, d[0], description=d[1])


#
# Restrict ip-version
#
errors += pscheduler.check_enum_limit(limit, spec, 'ip-version', description='IP Version')


#
# Finish up
#

result = { "passes": not errors }

if errors:
    result["errors"] = errors

pscheduler.succeed_json(result)
