diff -rupN jsontemplate-0.87-orig/jsontemplate/formatters.py jsontemplate-0.87/jsontemplate/formatters.py
--- jsontemplate-0.87-orig/jsontemplate/formatters.py	2019-08-20 13:40:49.885723002 -0400
+++ jsontemplate-0.87/jsontemplate/formatters.py	2019-08-20 13:41:42.410972500 -0400
@@ -22,7 +22,7 @@ __author__ = 'Andy Chu'
 import os
 import sys
 
-import _jsontemplate as jsontemplate  # For TemplateFileInclude
+from . import _jsontemplate as jsontemplate  # For TemplateFileInclude
 
 
 class Error(Exception):
diff -rupN jsontemplate-0.87-orig/jsontemplate/formatters_test.py jsontemplate-0.87/jsontemplate/formatters_test.py
--- jsontemplate-0.87-orig/jsontemplate/formatters_test.py	2019-08-20 13:40:49.885723002 -0400
+++ jsontemplate-0.87/jsontemplate/formatters_test.py	2019-08-20 13:41:42.438986500 -0400
@@ -62,7 +62,7 @@ class FormattersTest(taste.Test):
 
   def testRepr(self):
     t = jsontemplate.Template('{a|repr}')
-    self.verify.Equal(t.expand(a=u'\u00b5'), "u'\\xb5'")
+    self.verify.Equal(t.expand(a='\u00b5'), "u'\\xb5'")
 
   def testPythonPercentFormat(self):
     t = jsontemplate.Template(
diff -rupN jsontemplate-0.87-orig/jsontemplate/highlight.py jsontemplate-0.87/jsontemplate/highlight.py
--- jsontemplate-0.87-orig/jsontemplate/highlight.py	2019-08-20 13:40:49.885723002 -0400
+++ jsontemplate-0.87/jsontemplate/highlight.py	2019-08-20 13:41:42.452993500 -0400
@@ -1,58 +1,58 @@
-#!/usr/bin/python -S
-"""
-highlight.py
-"""
-
-__author__ = 'Andy Chu'
-
-
-import cgi
-import _jsontemplate as jsontemplate
-
-
-_TEMPLATE = None
-
-COMMENT, DIRECTIVE, SUBSTITUTION = range(3)
-
-
-def AsHtml(template_str, meta='{}', format_char='|'):
-
-  global _TEMPLATE
-  if not _TEMPLATE:
-    _TEMPLATE = jsontemplate.Template(
-        '<span style="color: {color|htmltag};">{token|html}</span>')
-
-  meta_left, meta_right = jsontemplate.SplitMeta(meta)
-  token_re = jsontemplate.MakeTokenRegex(meta_left, meta_right)
-  tokens = token_re.split(template_str)
-
-  html = []
-
-  for i, token in enumerate(tokens):
-
-    # By the definition of re.split, even tokens are literal strings, and odd
-    # tokens are directives.
-    if i % 2 == 0:
-      html.append(cgi.escape(token))
-    else:
-      # Because of the regex, the token should be at least 2 characters long
-      c = token[1]
-
-      if c == '#':
-        token_type = COMMENT
-      elif c == '.':
-        token_type = DIRECTIVE
-      else:
-        token_type = SUBSTITUTION
-
-      # TODO: Use classes, and make comments italic
-      color = {
-          COMMENT: 'red',
-          DIRECTIVE: 'blue',
-          SUBSTITUTION: 'green'
-          }[token_type]
-      html.append(_TEMPLATE.expand({'color': color, 'token': token}))
-
-  # Without <pre>, we would have to turn newlines into line breaks, etc.
-  return '<pre>%s</pre>' % ''.join(html)
-
+#!/usr/bin/python -S
+"""
+highlight.py
+"""
+
+__author__ = 'Andy Chu'
+
+
+import cgi
+from . import _jsontemplate as jsontemplate
+
+
+_TEMPLATE = None
+
+COMMENT, DIRECTIVE, SUBSTITUTION = list(range(3))
+
+
+def AsHtml(template_str, meta='{}', format_char='|'):
+
+  global _TEMPLATE
+  if not _TEMPLATE:
+    _TEMPLATE = jsontemplate.Template(
+        '<span style="color: {color|htmltag};">{token|html}</span>')
+
+  meta_left, meta_right = jsontemplate.SplitMeta(meta)
+  token_re = jsontemplate.MakeTokenRegex(meta_left, meta_right)
+  tokens = token_re.split(template_str)
+
+  html = []
+
+  for i, token in enumerate(tokens):
+
+    # By the definition of re.split, even tokens are literal strings, and odd
+    # tokens are directives.
+    if i % 2 == 0:
+      html.append(cgi.escape(token))
+    else:
+      # Because of the regex, the token should be at least 2 characters long
+      c = token[1]
+
+      if c == '#':
+        token_type = COMMENT
+      elif c == '.':
+        token_type = DIRECTIVE
+      else:
+        token_type = SUBSTITUTION
+
+      # TODO: Use classes, and make comments italic
+      color = {
+          COMMENT: 'red',
+          DIRECTIVE: 'blue',
+          SUBSTITUTION: 'green'
+          }[token_type]
+      html.append(_TEMPLATE.expand({'color': color, 'token': token}))
+
+  # Without <pre>, we would have to turn newlines into line breaks, etc.
+  return '<pre>%s</pre>' % ''.join(html)
+
diff -rupN jsontemplate-0.87-orig/jsontemplate/__init__.py jsontemplate-0.87/jsontemplate/__init__.py
--- jsontemplate-0.87-orig/jsontemplate/__init__.py	2019-08-20 13:40:49.885723002 -0400
+++ jsontemplate-0.87/jsontemplate/__init__.py	2019-08-20 13:41:42.454994500 -0400
@@ -1 +1 @@
-from _jsontemplate import *
+from ._jsontemplate import *
diff -rupN jsontemplate-0.87-orig/jsontemplate/_jsontemplate.py jsontemplate-0.87/jsontemplate/_jsontemplate.py
--- jsontemplate-0.87-orig/jsontemplate/_jsontemplate.py	2019-08-20 13:40:49.885723002 -0400
+++ jsontemplate-0.87/jsontemplate/_jsontemplate.py	2019-08-20 13:41:42.713123500 -0400
@@ -65,7 +65,7 @@ __all__ = [
     # Function API
     'SIMPLE_FUNC', 'ENHANCED_FUNC']
 
-import StringIO
+import io
 import pprint
 import re
 import sys
@@ -73,8 +73,9 @@ import sys
 # For formatters
 import cgi  # cgi.escape
 import time  # for strftime
-import urllib  # for urllib.encode
-import urlparse  # for urljoin
+import urllib.request, urllib.parse, urllib.error  # for urllib.encode
+import urllib.parse  # for urljoin
+import collections
 
 
 class Error(Exception):
@@ -194,10 +195,10 @@ class DictRegistry(FunctionRegistry):
   """Look up functions in a simple dictionary."""
 
   def __init__(self, func_dict):
-    self.func_dict = func_dict
+    self.__dict__ = func_dict
 
   def LookupWithType(self, user_str):
-    return self.func_dict.get(user_str), None, _DecideFuncType(user_str)
+    return self.__dict__.get(user_str), None, _DecideFuncType(user_str)
 
 
 class CallableRegistry(FunctionRegistry):
@@ -332,7 +333,7 @@ class _ProgramBuilder(object):
     # FunctionRegistry
     if isinstance(formatters, dict):
       formatters = DictRegistry(formatters)
-    elif callable(formatters):
+    elif isinstance(formatters, collections.Callable):
       formatters = CallableRegistry(formatters)
 
     # default formatters with arguments
@@ -357,7 +358,7 @@ class _ProgramBuilder(object):
     # Same for predicates
     if isinstance(predicates, dict):
       predicates = DictRegistry(predicates)
-    elif callable(predicates):
+    elif isinstance(predicates, collections.Callable):
       predicates = CallableRegistry(predicates)
 
     # default predicates with arguments
@@ -698,7 +699,7 @@ def _ToString(x):
   # jsontemplate_test.py.
   if x is None:
     return 'null'
-  if isinstance(x, basestring):
+  if isinstance(x, str):
     return x
   return pprint.pformat(x)
 
@@ -708,14 +709,14 @@ def _ToString(x):
 # like {number|increment-by 1}, where formatters take and return integers.
 def _Html(x):
   # If it's not string or unicode, make it a string
-  if not isinstance(x, basestring):
+  if not isinstance(x, str):
     x = str(x)
   return cgi.escape(x)
 
 
 def _HtmlAttrValue(x):
   # If it's not string or unicode, make it a string
-  if not isinstance(x, basestring):
+  if not isinstance(x, str):
     x = str(x)
   return cgi.escape(x, quote=True)
 
@@ -731,7 +732,7 @@ def _AbsUrl(relative_url, context, unuse
   """
   # urljoin is flexible about trailing/leading slashes -- it will add or de-dupe
   # them
-  return urlparse.urljoin(context.Lookup('base-url'), relative_url)
+  return urllib.parse.urljoin(context.Lookup('base-url'), relative_url)
 
 
 def _Reverse(x):
@@ -773,10 +774,10 @@ _DEFAULT_FORMATTERS = {
     'size': lambda value: str(len(value)),
 
     # The argument is a dictionary, and we get a a=1&b=2 string back.
-    'url-params': lambda x: urllib.urlencode(x, doseq=True),
+    'url-params': lambda x: urllib.parse.urlencode(x, doseq=True),
 
     # The argument is an atom, and it takes 'Search query?' -> 'Search+query%3F'
-    'url-param-value': urllib.quote_plus,  # param is an atom
+    'url-param-value': urllib.parse.quote_plus,  # param is an atom
 
     # The default formatter, when no other default is specifier.  For debugging,
     # this could be lambda x: json.dumps(x, indent=2), but here we want to be
@@ -969,7 +970,7 @@ def MakeTokenRegex(meta_left, meta_right
 
   COMMENT_BEGIN_TOKEN,  # {##BEGIN}
   COMMENT_END_TOKEN,  # {##END}
-  ) = range(14)
+  ) = list(range(14))
 
 COMMENT_BEGIN = '##BEGIN'
 COMMENT_END = '##END'
@@ -1270,7 +1271,7 @@ _OPTION_NAMES = ['meta', 'format-char',
 def FromString(s, **kwargs):
   """Like FromFile, but takes a string."""
 
-  f = StringIO.StringIO(s)
+  f = io.StringIO(s)
   return FromFile(f, **kwargs)
 
 
@@ -1544,7 +1545,7 @@ def _MakeGroupFromRootSection(root_secti
   """
   group = {}
   for statement in root_section.Statements():
-    if isinstance(statement, basestring):
+    if isinstance(statement, str):
       continue
     func, args = statement
     # here the function acts as ID for the block type
@@ -1574,7 +1575,7 @@ def MakeTemplateGroup(group):
     group: dictionary of template name -> compiled Template instance
   """
   # mutate all of the templates so that they can reference each other
-  for t in group.itervalues():
+  for t in group.values():
     t._SetTemplateGroup(group)
     #t._CheckRefs()
 
@@ -1686,7 +1687,7 @@ def _DoSubstitute(args, context, callbac
   else:
     try:
       value = context.Lookup(name)
-    except TypeError, e:
+    except TypeError as e:
       raise EvaluationError(
           'Error evaluating %r in context %r: %r' % (name, context, e))
 
@@ -1719,7 +1720,7 @@ def _DoSubstitute(args, context, callbac
       # Don't "wrap" recursive EvaluationErrors
       raise
 
-    except Exception, e:
+    except Exception as e:
       if formatter_type == TEMPLATE_FORMATTER:
         raise  # in this case we want to see the original exception
       raise EvaluationError(
@@ -1746,7 +1747,7 @@ def _Execute(statements, context, callba
   if trace:
     trace.exec_depth += 1
   for i, statement in enumerate(statements):
-    if isinstance(statement, basestring):
+    if isinstance(statement, str):
       callback(statement)
     else:
       # In the case of a substitution, args is a pair (name, formatters).
@@ -1754,7 +1755,7 @@ def _Execute(statements, context, callba
       try:
         func, args = statement
         func(args, context, callback, trace)
-      except UndefinedVariable, e:
+      except UndefinedVariable as e:
         # Show context for statements
         start = max(0, i-3)
         end = i+3
@@ -1782,7 +1783,7 @@ def _FlattenToCallback(tokens, callback)
   ['a', ['b', 'c']] -> callback('a'); callback('b'); callback('c');
   """
   for t in tokens:
-    if isinstance(t, basestring):
+    if isinstance(t, str):
       callback(t)
     else:
       _FlattenToCallback(t, callback)
diff -rupN jsontemplate-0.87-orig/jsontemplate/jsontemplate_unittest.py jsontemplate-0.87/jsontemplate/jsontemplate_unittest.py
--- jsontemplate-0.87-orig/jsontemplate/jsontemplate_unittest.py	2019-08-20 13:40:49.885723002 -0400
+++ jsontemplate-0.87/jsontemplate/jsontemplate_unittest.py	2019-08-20 13:41:42.820177000 -0400
@@ -141,11 +141,11 @@ Hello <there>
   def testEncoding(self):
     # Bug fix: Templates that are Unicode strings should expand as Unicode
     # strings.  (This is why we use StringIO instead of cStringIO).
-    t = jsontemplate.FromString(u'\u00FF')
-    self.verify.Equal(t.expand({}), u'\u00FF')
+    t = jsontemplate.FromString('\u00FF')
+    self.verify.Equal(t.expand({}), '\u00FF')
 
-    t = jsontemplate.FromString(u'\uFF00')
-    self.verify.Equal(t.expand({}), u'\uFF00')
+    t = jsontemplate.FromString('\uFF00')
+    self.verify.Equal(t.expand({}), '\uFF00')
 
 
 class ScopedContextTest(taste.Test):
@@ -157,7 +157,7 @@ class ScopedContextTest(taste.Test):
     self.verify.Equal(s.Lookup('foo'), data['foo'])
     self.verify.Equal(s.Lookup('@'), data)
 
-    print s.PushSection('foo', [])
+    print(s.PushSection('foo', []))
     self.verify.Equal(s.Lookup('@'), data['foo'])
     s.Next()
     self.verify.Equal(s.Lookup('@'), 1)
@@ -187,7 +187,7 @@ class InternalTemplateTest(taste.Test):
         
         There are {num} ways to do it
         """))
-    self.verify.Equal('There are 5 ways to do it\n', t.expand({'num': 5L}))
+    self.verify.Equal('There are 5 ways to do it\n', t.expand({'num': 5}))
 
   def testMultipleFormatters(self):
     # TODO: This could have a version in the external test too, just not with
@@ -225,10 +225,10 @@ class InternalTemplateTest(taste.Test):
 
     t = taste.ClassDef('{@}', more_formatters=_More)
     d = {
-        u'url': u'http://example.com',
-        u'person': {
-            u'name': u'Andy',
-            u'age': 30,
+        'url': 'http://example.com',
+        'person': {
+            'name': 'Andy',
+            'age': 30,
             }
         }
 
@@ -320,22 +320,22 @@ class InternalTemplateTest(taste.Test):
     self.verify.Equal(trace.exec_depth, 1)
 
   def testSimpleUnicodeSubstitution(self):
-    t = jsontemplate.Template(u'Hello {name}')
+    t = jsontemplate.Template('Hello {name}')
 
-    self.verify.Equal(t.expand({u'name': u'World'}), u'Hello World')
+    self.verify.Equal(t.expand({'name': 'World'}), 'Hello World')
 
   def testUnicodeTemplateMixed(self):
     # Unicode template
-    t = jsontemplate.Template(u'Hello {name}')
+    t = jsontemplate.Template('Hello {name}')
 
     # Encoded utf-8 data is OK
-    self.verify.Equal(t.expand({u'name': '\xc2\xb5'}), u'Hello \xb5')
+    self.verify.Equal(t.expand({'name': '\xc2\xb5'}), 'Hello \xb5')
 
     # Latin-1 data is not OK
-    self.verify.Raises(UnicodeDecodeError, t.expand, {u'name': '\xb5'})
+    self.verify.Raises(UnicodeDecodeError, t.expand, {'name': '\xb5'})
 
     # Byte string \0 turns into code point 0
-    self.verify.Equal(t.expand({u'name': '\0'}), u'Hello \u0000')
+    self.verify.Equal(t.expand({'name': '\0'}), 'Hello \u0000')
 
   def testByteTemplateMixed(self):
 
@@ -343,14 +343,14 @@ class InternalTemplateTest(taste.Test):
     t = jsontemplate.Template('Hello \xb5 {name}')
 
     # Byte string OK
-    self.verify.Equal(t.expand({u'name': '\xb5'}), 'Hello \xb5 \xb5')
+    self.verify.Equal(t.expand({'name': '\xb5'}), 'Hello \xb5 \xb5')
 
-    self.verify.Raises(UnicodeDecodeError, t.expand, {u'name': u'\u00b5'})
+    self.verify.Raises(UnicodeDecodeError, t.expand, {'name': '\u00b5'})
 
     # Byte string template without any special chars
     t = jsontemplate.Template('Hello {name}')
     # Unicode data is OK
-    self.verify.Equal(t.expand({u'name': u'\u00b5'}), u'Hello \u00B5')
+    self.verify.Equal(t.expand({'name': '\u00b5'}), 'Hello \u00B5')
 
   def testRepeatedSectionFormatter(self):
     def _Columns(x):
