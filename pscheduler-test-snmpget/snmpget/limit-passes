#!/usr/bin/python
#
# Checker for 'snmpget' task limits
#

import pscheduler

from validate import spec_is_valid
from validate import limit_is_valid

#
# Load and validate everything
#

try:
    json = pscheduler.json_load() # from stdin?
except ValueError as ex:
    pscheduler.fail("Invalid JSON %s" % str(ex))

spec = json["spec"]
valid, message = spec_is_valid(spec)
if not valid:
    raise ValueError("Invalid test spec: %s" % message)

limit = json["limit"]
valid, message = limit_is_valid(limit)
if not valid:
    raise ValueError("Invalid limit: %s" % message)


#
# Evaluate everything
#

errors = []


#
# Query, record, nameserver, host, host-node
#
for value in [ "query", "record", "nameserver", "host", "host-node" ]:
    try:
	match = pscheduler.StringMatcher(limit[value]["match"])
	try:
	    invert = limit[value]["invert"]
	except KeyError:
	    invert = False
	in_limit = match.matches(spec[value])
	if not in_limit or (invert and in_limit):
	    try:
		errors.append(limit[value]["fail-message"])
	    except KeyError:
		errors.append("%s does not match limit" % (value.capitalize()))
    except KeyError:
	pass  # Don't care if not there.

#
# Timeout
#
try:
    match = pscheduler.DurationRange(limit["timeout"]["range"])
    if spec["timeout"] not in match:
        try:
            errors.append(limit["timeout"]["fail-message"])
        except KeyError:
            errors.append("Timeout not within limit")

except KeyError:
    pass  # Don't care if not there.


#
# Finish up
#

result = { "passes": not errors }

if errors:
    result["errors"] = errors

pscheduler.succeed_json(result)
