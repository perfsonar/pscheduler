#!/usr/bin/env python3
"""
Send a result to http.
"""

import sys
import pscheduler
import pscheduler.psurl

MAX_SCHEMA = 2

def archive(json):
    """Archive a single result."""

    schema = json["data"].get("schema", 1)
    if schema > MAX_SCHEMA:
        return {
            "succeeded": False,
            "error": "Unsupported schema version %d; max is %d" % (
                schema, MAX_SCHEMA)
        }

    errors = ()

    try:
        url = json['data']['_url']
    except KeyError:
        raise RuntimeError("Reached code that wasn't supposed to be reached.")

    try:
        op = json['data']['op']
    except KeyError:
        op = 'post'

    try:
        bind = json['data']['bind']
    except KeyError:
        bind = None


    # Headers get special behavior because the Content-Type may be
    # provided explicitly, in which case it's obeyed.  Otherwise,
    # strings will be made text/plain and anything else will be
    # application/json.

    result = json['result']

    try:
        headers = json['data']['_headers']
    except KeyError:
        headers = {}


    if len(headers):
        # Remove all null headers
        headers = dict((k, v) for k, v in headers.items() if v)
        # Stringify all values
        headers = dict((k, str(v)) for k, v in headers.items())


    if op == 'post':

        try:
            pscheduler.url_post( url, data=result, json=False,
                                 headers=headers, bind=bind )
        except Exception as ex:
            result = {
                "succeeded": False,
                "error": "Failed to log result: %s" % str(ex)
            }
            if "retry-policy" in json['data']:
                policy = pscheduler.RetryPolicy(json['data']['retry-policy'], iso8601=True)
                retry_time = policy.retry(json["attempts"])
                if retry_time is not None:
                    result["retry"] = retry_time
            return result

    elif op == 'put':

        try:
            pscheduler.url_put( url, data=result, json=False,
                                headers=headers, bind=bind )
        except Exception as ex:
            result = {
                "succeeded": False,
                "error": "Failed to log result: %s" % str(ex)
            }
            if "retry-policy" in json['data']:
                policy = pscheduler.RetryPolicy(json['data']['retry-policy'], iso8601=True)
                retry_time = policy.retry(json["attempts"])
                if retry_time is not None:
                    result["retry"] = retry_time
            return result

    else:
        return {
            "succeeded": False,
            "error": "Invalid op arg: %s" % op
        }

    return {'succeeded': True}




PARSER = pscheduler.RFC7464Parser(sys.stdin)
EMITTER = pscheduler.RFC7464Emitter(sys.stdout)

for parsed in PARSER:
    EMITTER(archive(parsed))

pscheduler.succeed()
