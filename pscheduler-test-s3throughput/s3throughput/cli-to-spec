#!/usr/bin/env python3

#
# Development Order #4:
# 
# This file encodes CLI arguments as JSON data in a test spec,
# as defined by the datatypes in validate.py
# 
# This can be tested directly using the following syntax:
# ./cli-to-spec --option argument
#

import re
import argparse
import pscheduler
import sys
from urllib.parse import urlparse

input_args = []

if len(sys.argv) > 1:

   # Args are on the command line
   input_args = sys.argv[1:]

else:

   # Args are in a JSON array on stdin
   json_args = pscheduler.json_load(exit_on_error=True)
   input_args = []

   if not isinstance(json_args,list):
      pscheduler.fail("Invalid JSON for this operation")
   for arg in json_args:
      if not ( isinstance(arg, str)
               or isinstance(arg, int)
               or isinstance(arg, float) ):
         pscheduler.fail("Invalid JSON for this operation")
   input_args = [ str(arg) for arg in json_args ]



# Gargle the arguments

arg_parser = argparse.ArgumentParser()


arg_parser.add_argument("--host",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host")

arg_parser.add_argument("--host-node",
                      help="Host to run the test.",
                      action="store", type=str,
                      dest="host_node")

arg_parser.add_argument("--duration",
                      help="Duration of test.",
                      action="store", type=str,
                      dest="duration")

arg_parser.add_argument("--timeout",
                      help="Timeout for each query attempt",
                      action="store", type=str,
                      dest="timeout")

arg_parser.add_argument("--access-key",
                      help="Access key for the S3 server",
                      action="store", type=str,
                      dest="access_key")

arg_parser.add_argument("--bucket",
                      help="Bucket to use for the test",
                      action="store", type=str,
                      dest="bucket")

arg_parser.add_argument("--secret-key",
                      help="Secret key for the S3 server",
                      action="store", type=str,
                      dest="secret_key")

arg_parser.add_argument("--url",
                      help="Url for the S# server (including method)",
                      action="store", type=str,
                      dest="url")

arg_parser.add_argument("--iterations",
                      help="Number of times the test should be run",
                      action="store", type=int,
                      dest="iterations")

arg_parser.add_argument("--object-size",
                      help="Size of the objects to be used in the test",
                      action="store", type=str,
                      dest="object_size")

args = arg_parser.parse_args(input_args)

result = { 'schema': 1 }

if args.host is not None:
   result['host'] = args.host

if args.host_node is not None:
   result['host-node'] = args.host_node

if args.timeout is not None:
   result['timeout'] = args.timeout

if args.duration is not None:
   result['duration'] = args.duration

if args.access_key is not None:
   result['_access-key'] = args.access_key

if args.bucket is not None:
    result['bucket'] = args.bucket

if args.secret_key is not None:
   result['_secret-key'] = args.secret_key

if args.url is not None:
    result['url'] = args.url


if args.iterations is not None:
    result['iterations'] = args.iterations

if args.object_size is not None:
    args.object_size = pscheduler.si_as_number(args.object_size)
    result['object-size'] = args.object_size


pscheduler.succeed_json(result)
